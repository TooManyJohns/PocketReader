{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\n\nexports.mirrorPadConfig = {\n  kernelName: tfjs_1.MirrorPad,\n  backendName: 'tensorflow',\n  kernelFunc: function (_a) {\n    var inputs = _a.inputs,\n        backend = _a.backend,\n        attrs = _a.attrs;\n    var x = inputs.x;\n    var _b = attrs,\n        paddings = _b.paddings,\n        mode = _b.mode;\n    var nodeBackend = backend;\n    var paddingsTensor = tfjs_1.tensor2d(paddings, [paddings.length, 2], 'int32');\n    var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype), nodejs_kernel_backend_1.createTensorsTypeOpAttr('Tpaddings', paddingsTensor.dtype), {\n      name: 'mode',\n      type: nodeBackend.binding.TF_ATTR_STRING,\n      value: mode.toUpperCase()\n    }];\n    var output = nodeBackend.executeSingleOutput('MirrorPad', opAttrs, [x, paddingsTensor]);\n    paddingsTensor.dispose();\n    return output;\n  }\n};","map":{"version":3,"sources":["/Users/johnlutz/Github/PocketReader/PocketReader/src/main/webapp/ui/node_modules/@tensorflow/tfjs-node/dist/kernels/MirrorPad.js"],"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","mirrorPadConfig","kernelName","MirrorPad","backendName","kernelFunc","_a","inputs","backend","attrs","x","_b","paddings","mode","nodeBackend","paddingsTensor","tensor2d","length","opAttrs","createTensorsTypeOpAttr","dtype","name","type","binding","TF_ATTR_STRING","toUpperCase","output","executeSingleOutput","dispose"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,0BAAD,CAArC;;AACAH,OAAO,CAACK,eAAR,GAA0B;AACtBC,EAAAA,UAAU,EAAEJ,MAAM,CAACK,SADG;AAEtBC,EAAAA,WAAW,EAAE,YAFS;AAGtBC,EAAAA,UAAU,EAAE,UAAUC,EAAV,EAAc;AACtB,QAAIC,MAAM,GAAGD,EAAE,CAACC,MAAhB;AAAA,QAAwBC,OAAO,GAAGF,EAAE,CAACE,OAArC;AAAA,QAA8CC,KAAK,GAAGH,EAAE,CAACG,KAAzD;AACA,QAAIC,CAAC,GAAGH,MAAM,CAACG,CAAf;AACA,QAAIC,EAAE,GAAGF,KAAT;AAAA,QAAgBG,QAAQ,GAAGD,EAAE,CAACC,QAA9B;AAAA,QAAwCC,IAAI,GAAGF,EAAE,CAACE,IAAlD;AACA,QAAIC,WAAW,GAAGN,OAAlB;AACA,QAAIO,cAAc,GAAGjB,MAAM,CAACkB,QAAP,CAAgBJ,QAAhB,EAA0B,CAACA,QAAQ,CAACK,MAAV,EAAkB,CAAlB,CAA1B,EAAgD,OAAhD,CAArB;AACA,QAAIC,OAAO,GAAG,CACVlB,uBAAuB,CAACmB,uBAAxB,CAAgD,GAAhD,EAAqDT,CAAC,CAACU,KAAvD,CADU,EAEVpB,uBAAuB,CAACmB,uBAAxB,CAAgD,WAAhD,EAA6DJ,cAAc,CAACK,KAA5E,CAFU,EAE0E;AAChFC,MAAAA,IAAI,EAAE,MAD0E;AAEhFC,MAAAA,IAAI,EAAER,WAAW,CAACS,OAAZ,CAAoBC,cAFsD;AAGhF3B,MAAAA,KAAK,EAAEgB,IAAI,CAACY,WAAL;AAHyE,KAF1E,CAAd;AAQA,QAAIC,MAAM,GAAGZ,WAAW,CAACa,mBAAZ,CAAgC,WAAhC,EAA6CT,OAA7C,EAAsD,CAACR,CAAD,EAAIK,cAAJ,CAAtD,CAAb;AACAA,IAAAA,cAAc,CAACa,OAAf;AACA,WAAOF,MAAP;AACH;AApBqB,CAA1B","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.mirrorPadConfig = {\n    kernelName: tfjs_1.MirrorPad,\n    backendName: 'tensorflow',\n    kernelFunc: function (_a) {\n        var inputs = _a.inputs, backend = _a.backend, attrs = _a.attrs;\n        var x = inputs.x;\n        var _b = attrs, paddings = _b.paddings, mode = _b.mode;\n        var nodeBackend = backend;\n        var paddingsTensor = tfjs_1.tensor2d(paddings, [paddings.length, 2], 'int32');\n        var opAttrs = [\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype),\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('Tpaddings', paddingsTensor.dtype), {\n                name: 'mode',\n                type: nodeBackend.binding.TF_ATTR_STRING,\n                value: mode.toUpperCase()\n            }\n        ];\n        var output = nodeBackend.executeSingleOutput('MirrorPad', opAttrs, [x, paddingsTensor]);\n        paddingsTensor.dispose();\n        return output;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}