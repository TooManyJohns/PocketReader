{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\n\nexports.cropAndResizeConfig = {\n  kernelName: tfjs_1.CropAndResize,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var _a = args.inputs,\n        image = _a.image,\n        boxes = _a.boxes,\n        boxInd = _a.boxInd;\n    var backend = args.backend;\n    var _b = args.attrs,\n        cropSize = _b.cropSize,\n        method = _b.method,\n        extrapolationValue = _b.extrapolationValue;\n    var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', image.dtype), {\n      name: 'method',\n      type: backend.binding.TF_ATTR_STRING,\n      value: method\n    }, {\n      name: 'extrapolation_value',\n      type: backend.binding.TF_ATTR_FLOAT,\n      value: extrapolationValue\n    }];\n    var cropSizeTensor = tfjs_1.tensor1d(cropSize, 'int32');\n    var res = backend.executeSingleOutput(tfjs_1.CropAndResize, opAttrs, [image, boxes, boxInd, cropSizeTensor]);\n    cropSizeTensor.dispose();\n    return res;\n  }\n};","map":{"version":3,"sources":["/Users/johnlutz/Github/PocketReader/PocketReader/src/main/webapp/ui/node_modules/@tensorflow/tfjs-node/dist/kernels/CropAndResize.js"],"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","cropAndResizeConfig","kernelName","CropAndResize","backendName","kernelFunc","args","_a","inputs","image","boxes","boxInd","backend","_b","attrs","cropSize","method","extrapolationValue","opAttrs","createTensorsTypeOpAttr","dtype","name","type","binding","TF_ATTR_STRING","TF_ATTR_FLOAT","cropSizeTensor","tensor1d","res","executeSingleOutput","dispose"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,0BAAD,CAArC;;AACAH,OAAO,CAACK,mBAAR,GAA8B;AAC1BC,EAAAA,UAAU,EAAEJ,MAAM,CAACK,aADO;AAE1BC,EAAAA,WAAW,EAAE,YAFa;AAG1BC,EAAAA,UAAU,EAAE,UAAUC,IAAV,EAAgB;AACxB,QAAIC,EAAE,GAAGD,IAAI,CAACE,MAAd;AAAA,QAAsBC,KAAK,GAAGF,EAAE,CAACE,KAAjC;AAAA,QAAwCC,KAAK,GAAGH,EAAE,CAACG,KAAnD;AAAA,QAA0DC,MAAM,GAAGJ,EAAE,CAACI,MAAtE;AACA,QAAIC,OAAO,GAAGN,IAAI,CAACM,OAAnB;AACA,QAAIC,EAAE,GAAGP,IAAI,CAACQ,KAAd;AAAA,QAAqBC,QAAQ,GAAGF,EAAE,CAACE,QAAnC;AAAA,QAA6CC,MAAM,GAAGH,EAAE,CAACG,MAAzD;AAAA,QAAiEC,kBAAkB,GAAGJ,EAAE,CAACI,kBAAzF;AACA,QAAIC,OAAO,GAAG,CACVlB,uBAAuB,CAACmB,uBAAxB,CAAgD,GAAhD,EAAqDV,KAAK,CAACW,KAA3D,CADU,EAEV;AAAEC,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,IAAI,EAAEV,OAAO,CAACW,OAAR,CAAgBC,cAAxC;AAAwD3B,MAAAA,KAAK,EAAEmB;AAA/D,KAFU,EAE+D;AACrEK,MAAAA,IAAI,EAAE,qBAD+D;AAErEC,MAAAA,IAAI,EAAEV,OAAO,CAACW,OAAR,CAAgBE,aAF+C;AAGrE5B,MAAAA,KAAK,EAAEoB;AAH8D,KAF/D,CAAd;AAQA,QAAIS,cAAc,GAAG5B,MAAM,CAAC6B,QAAP,CAAgBZ,QAAhB,EAA0B,OAA1B,CAArB;AACA,QAAIa,GAAG,GAAGhB,OAAO,CAACiB,mBAAR,CAA4B/B,MAAM,CAACK,aAAnC,EAAkDe,OAAlD,EAA2D,CAACT,KAAD,EAAQC,KAAR,EAAeC,MAAf,EAAuBe,cAAvB,CAA3D,CAAV;AACAA,IAAAA,cAAc,CAACI,OAAf;AACA,WAAOF,GAAP;AACH;AAnByB,CAA9B","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.cropAndResizeConfig = {\n    kernelName: tfjs_1.CropAndResize,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var _a = args.inputs, image = _a.image, boxes = _a.boxes, boxInd = _a.boxInd;\n        var backend = args.backend;\n        var _b = args.attrs, cropSize = _b.cropSize, method = _b.method, extrapolationValue = _b.extrapolationValue;\n        var opAttrs = [\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', image.dtype),\n            { name: 'method', type: backend.binding.TF_ATTR_STRING, value: method }, {\n                name: 'extrapolation_value',\n                type: backend.binding.TF_ATTR_FLOAT,\n                value: extrapolationValue\n            }\n        ];\n        var cropSizeTensor = tfjs_1.tensor1d(cropSize, 'int32');\n        var res = backend.executeSingleOutput(tfjs_1.CropAndResize, opAttrs, [image, boxes, boxInd, cropSizeTensor]);\n        cropSizeTensor.dispose();\n        return res;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}