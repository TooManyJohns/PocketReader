{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\n\nexports.conv2DBackpropInputConfig = {\n  kernelName: tfjs_1.Conv2DBackpropInput,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var _a = args.inputs,\n        dy = _a.dy,\n        filter = _a.filter;\n    var backend = args.backend;\n    var _b = args.attrs,\n        strides = _b.strides,\n        pad = _b.pad,\n        dataFormat = _b.dataFormat,\n        dimRoundingMode = _b.dimRoundingMode,\n        inputShape = _b.inputShape;\n    var $dataFormat = tfjs_1.backend_util.convertConv2DDataFormat(dataFormat);\n    var convInfo = tfjs_1.backend_util.computeConv2DInfo(inputShape, filter.shape, strides, 1\n    /* dilations */\n    , pad, dimRoundingMode, false, $dataFormat);\n    return conv2DBackpropInputImpl(dy, filter, convInfo, backend);\n  }\n};\n\nfunction conv2DBackpropInputImpl(dy, filter, convInfo, backend) {\n  if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n    throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + (\"while padding was \" + convInfo.padInfo.type));\n  }\n\n  var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n  var padding = convInfo.padInfo.type;\n  var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n  var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n  var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', 'float32'), {\n    name: 'strides',\n    type: backend.binding.TF_ATTR_INT,\n    value: strides\n  }, {\n    name: 'padding',\n    type: backend.binding.TF_ATTR_STRING,\n    value: padding\n  }, {\n    name: 'data_format',\n    type: backend.binding.TF_ATTR_STRING,\n    value: dataFormat\n  }, {\n    name: 'use_cudnn_on_gpu',\n    type: backend.binding.TF_ATTR_BOOL,\n    value: true\n  }, {\n    name: 'dilations',\n    type: backend.binding.TF_ATTR_INT,\n    value: dilations\n  }];\n  var inputSizes = tfjs_1.tensor1d(convInfo.inShape, 'int32');\n  var res = backend.executeSingleOutput(tfjs_1.Conv2DBackpropInput, opAttrs, [inputSizes, filter, dy]);\n  inputSizes.dispose();\n  return res;\n}","map":{"version":3,"sources":["/Users/johnlutz/Github/PocketReader/PocketReader/src/main/webapp/ui/node_modules/@tensorflow/tfjs-node/dist/kernels/Conv2DBackpropInput.js"],"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","conv2DBackpropInputConfig","kernelName","Conv2DBackpropInput","backendName","kernelFunc","args","_a","inputs","dy","filter","backend","_b","attrs","strides","pad","dataFormat","dimRoundingMode","inputShape","$dataFormat","backend_util","convertConv2DDataFormat","convInfo","computeConv2DInfo","shape","conv2DBackpropInputImpl","padInfo","type","Error","strideHeight","strideWidth","padding","dilations","dilationHeight","dilationWidth","opAttrs","createTensorsTypeOpAttr","name","binding","TF_ATTR_INT","TF_ATTR_STRING","TF_ATTR_BOOL","inputSizes","tensor1d","inShape","res","executeSingleOutput","dispose"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.conv2DBackpropInputConfig = {\n    kernelName: tfjs_1.Conv2DBackpropInput,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var _a = args.inputs, dy = _a.dy, filter = _a.filter;\n        var backend = args.backend;\n        var _b = args.attrs, strides = _b.strides, pad = _b.pad, dataFormat = _b.dataFormat, dimRoundingMode = _b.dimRoundingMode, inputShape = _b.inputShape;\n        var $dataFormat = tfjs_1.backend_util.convertConv2DDataFormat(dataFormat);\n        var convInfo = tfjs_1.backend_util.computeConv2DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n        return conv2DBackpropInputImpl(dy, filter, convInfo, backend);\n    }\n};\nfunction conv2DBackpropInputImpl(dy, filter, convInfo, backend) {\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n        throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n            (\"while padding was \" + convInfo.padInfo.type));\n    }\n    var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n    var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n    var opAttrs = [\n        nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', 'float32'),\n        { name: 'strides', type: backend.binding.TF_ATTR_INT, value: strides },\n        { name: 'padding', type: backend.binding.TF_ATTR_STRING, value: padding }, {\n            name: 'data_format',\n            type: backend.binding.TF_ATTR_STRING,\n            value: dataFormat\n        },\n        { name: 'use_cudnn_on_gpu', type: backend.binding.TF_ATTR_BOOL, value: true },\n        { name: 'dilations', type: backend.binding.TF_ATTR_INT, value: dilations }\n    ];\n    var inputSizes = tfjs_1.tensor1d(convInfo.inShape, 'int32');\n    var res = backend.executeSingleOutput(tfjs_1.Conv2DBackpropInput, opAttrs, [inputSizes, filter, dy]);\n    inputSizes.dispose();\n    return res;\n}\n"]},"metadata":{},"sourceType":"script"}