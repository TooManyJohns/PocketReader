{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nexports.fillConfig = {\n  kernelName: tfjs_1.Fill,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var backend = args.backend;\n    var _a = args.attrs,\n        shape = _a.shape,\n        value = _a.value;\n    var dtype = args.attrs.dtype; // TODO(cais, nkreeger): Investigate whether backend can be made into\n    // a dtype helper method. The underlying op kernel doesn't accept undefined\n    // or null dtype.\n\n    if (dtype == null) {\n      if (typeof value === 'number') {\n        dtype = 'float32';\n      } else {\n        dtype = 'string';\n      }\n    }\n\n    var shapeTensor = tfjs_1.tensor1d(shape, 'int32');\n    var valueTensor = tfjs_1.scalar(value, dtype);\n    var opAttrs = [{\n      name: 'T',\n      type: backend.binding.TF_ATTR_TYPE,\n      value: backend.getDTypeInteger(dtype)\n    }, {\n      name: 'index_type',\n      type: backend.binding.TF_ATTR_TYPE,\n      value: backend.binding.TF_INT32\n    }];\n    var res = backend.executeSingleOutput(tfjs_1.Fill, opAttrs, [shapeTensor, valueTensor]);\n    shapeTensor.dispose();\n    valueTensor.dispose();\n    return res;\n  }\n};","map":{"version":3,"sources":["/Users/johnlutz/Github/PocketReader/PocketReader/src/main/webapp/ui/node_modules/@tensorflow/tfjs-node/dist/kernels/Fill.js"],"names":["Object","defineProperty","exports","value","tfjs_1","require","fillConfig","kernelName","Fill","backendName","kernelFunc","args","backend","_a","attrs","shape","dtype","shapeTensor","tensor1d","valueTensor","scalar","opAttrs","name","type","binding","TF_ATTR_TYPE","getDTypeInteger","TF_INT32","res","executeSingleOutput","dispose"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAApB;;AACAH,OAAO,CAACI,UAAR,GAAqB;AACjBC,EAAAA,UAAU,EAAEH,MAAM,CAACI,IADF;AAEjBC,EAAAA,WAAW,EAAE,YAFI;AAGjBC,EAAAA,UAAU,EAAE,UAAUC,IAAV,EAAgB;AACxB,QAAIC,OAAO,GAAGD,IAAI,CAACC,OAAnB;AACA,QAAIC,EAAE,GAAGF,IAAI,CAACG,KAAd;AAAA,QAAqBC,KAAK,GAAGF,EAAE,CAACE,KAAhC;AAAA,QAAuCZ,KAAK,GAAGU,EAAE,CAACV,KAAlD;AACA,QAAIa,KAAK,GAAGL,IAAI,CAACG,KAAL,CAAWE,KAAvB,CAHwB,CAIxB;AACA;AACA;;AACA,QAAIA,KAAK,IAAI,IAAb,EAAmB;AACf,UAAI,OAAOb,KAAP,KAAiB,QAArB,EAA+B;AAC3Ba,QAAAA,KAAK,GAAG,SAAR;AACH,OAFD,MAGK;AACDA,QAAAA,KAAK,GAAG,QAAR;AACH;AACJ;;AACD,QAAIC,WAAW,GAAGb,MAAM,CAACc,QAAP,CAAgBH,KAAhB,EAAuB,OAAvB,CAAlB;AACA,QAAII,WAAW,GAAGf,MAAM,CAACgB,MAAP,CAAcjB,KAAd,EAAqBa,KAArB,CAAlB;AACA,QAAIK,OAAO,GAAG,CACV;AACIC,MAAAA,IAAI,EAAE,GADV;AAEIC,MAAAA,IAAI,EAAEX,OAAO,CAACY,OAAR,CAAgBC,YAF1B;AAGItB,MAAAA,KAAK,EAAES,OAAO,CAACc,eAAR,CAAwBV,KAAxB;AAHX,KADU,EAMV;AACIM,MAAAA,IAAI,EAAE,YADV;AAEIC,MAAAA,IAAI,EAAEX,OAAO,CAACY,OAAR,CAAgBC,YAF1B;AAGItB,MAAAA,KAAK,EAAES,OAAO,CAACY,OAAR,CAAgBG;AAH3B,KANU,CAAd;AAYA,QAAIC,GAAG,GAAGhB,OAAO,CAACiB,mBAAR,CAA4BzB,MAAM,CAACI,IAAnC,EAAyCa,OAAzC,EAAkD,CAACJ,WAAD,EAAcE,WAAd,CAAlD,CAAV;AACAF,IAAAA,WAAW,CAACa,OAAZ;AACAX,IAAAA,WAAW,CAACW,OAAZ;AACA,WAAOF,GAAP;AACH;AApCgB,CAArB","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nexports.fillConfig = {\n    kernelName: tfjs_1.Fill,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var backend = args.backend;\n        var _a = args.attrs, shape = _a.shape, value = _a.value;\n        var dtype = args.attrs.dtype;\n        // TODO(cais, nkreeger): Investigate whether backend can be made into\n        // a dtype helper method. The underlying op kernel doesn't accept undefined\n        // or null dtype.\n        if (dtype == null) {\n            if (typeof value === 'number') {\n                dtype = 'float32';\n            }\n            else {\n                dtype = 'string';\n            }\n        }\n        var shapeTensor = tfjs_1.tensor1d(shape, 'int32');\n        var valueTensor = tfjs_1.scalar(value, dtype);\n        var opAttrs = [\n            {\n                name: 'T',\n                type: backend.binding.TF_ATTR_TYPE,\n                value: backend.getDTypeInteger(dtype)\n            },\n            {\n                name: 'index_type',\n                type: backend.binding.TF_ATTR_TYPE,\n                value: backend.binding.TF_INT32\n            }\n        ];\n        var res = backend.executeSingleOutput(tfjs_1.Fill, opAttrs, [shapeTensor, valueTensor]);\n        shapeTensor.dispose();\n        valueTensor.dispose();\n        return res;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}