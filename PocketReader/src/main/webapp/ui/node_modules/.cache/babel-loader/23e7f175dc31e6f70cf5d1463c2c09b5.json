{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\n\nexports.conv3DBackpropFilterV2Config = {\n  kernelName: tfjs_1.Conv3DBackpropFilterV2,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var _a = args.inputs,\n        x = _a.x,\n        dy = _a.dy;\n    var backend = args.backend;\n    var _b = args.attrs,\n        strides = _b.strides,\n        pad = _b.pad,\n        filterShape = _b.filterShape;\n    var dilations = 1;\n    var convInfo = tfjs_1.backend_util.computeConv3DInfo(x.shape, filterShape, strides, dilations, pad);\n    var $strides = [1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n\n    if (!backend.isGPUPackage && convInfo.dilationDepth > 1) {\n      throw new Error('CPU Dilation depth must be 1');\n    }\n\n    var $dilations = [1, convInfo.dilationDepth, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n    var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'strides',\n      type: backend.binding.TF_ATTR_INT,\n      value: $strides\n    }, {\n      name: 'padding',\n      type: backend.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: backend.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }, {\n      name: 'dilations',\n      type: backend.binding.TF_ATTR_INT,\n      value: $dilations\n    }];\n    var filterSizes = tfjs_1.tensor1d(filterShape, 'int32');\n    var res = backend.executeSingleOutput(tfjs_1.Conv3DBackpropFilterV2, opAttrs, [x, filterSizes, dy]);\n    filterSizes.dispose();\n    return res;\n  }\n};","map":{"version":3,"sources":["/Users/johnlutz/Github/PocketReader/PocketReader/src/main/webapp/ui/node_modules/@tensorflow/tfjs-node/dist/kernels/Conv3DBackpropFilterV2.js"],"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","conv3DBackpropFilterV2Config","kernelName","Conv3DBackpropFilterV2","backendName","kernelFunc","args","_a","inputs","x","dy","backend","_b","attrs","strides","pad","filterShape","dilations","convInfo","backend_util","computeConv3DInfo","shape","$strides","strideDepth","strideHeight","strideWidth","padding","padInfo","type","dataFormat","isGPUPackage","dilationDepth","Error","$dilations","dilationHeight","dilationWidth","opAttrs","createTensorsTypeOpAttr","dtype","name","binding","TF_ATTR_INT","TF_ATTR_STRING","filterSizes","tensor1d","res","executeSingleOutput","dispose"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.conv3DBackpropFilterV2Config = {\n    kernelName: tfjs_1.Conv3DBackpropFilterV2,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var _a = args.inputs, x = _a.x, dy = _a.dy;\n        var backend = args.backend;\n        var _b = args.attrs, strides = _b.strides, pad = _b.pad, filterShape = _b.filterShape;\n        var dilations = 1;\n        var convInfo = tfjs_1.backend_util.computeConv3DInfo(x.shape, filterShape, strides, dilations, pad);\n        var $strides = [\n            1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1\n        ];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n        if (!backend.isGPUPackage && convInfo.dilationDepth > 1) {\n            throw new Error('CPU Dilation depth must be 1');\n        }\n        var $dilations = [\n            1, convInfo.dilationDepth, convInfo.dilationHeight,\n            convInfo.dilationWidth, 1\n        ];\n        var opAttrs = [\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype),\n            { name: 'strides', type: backend.binding.TF_ATTR_INT, value: $strides },\n            { name: 'padding', type: backend.binding.TF_ATTR_STRING, value: padding }, {\n                name: 'data_format',\n                type: backend.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n            { name: 'dilations', type: backend.binding.TF_ATTR_INT, value: $dilations }\n        ];\n        var filterSizes = tfjs_1.tensor1d(filterShape, 'int32');\n        var res = backend.executeSingleOutput(tfjs_1.Conv3DBackpropFilterV2, opAttrs, [x, filterSizes, dy]);\n        filterSizes.dispose();\n        return res;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}