{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\n\nexports.batchMatMulConfig = {\n  kernelName: tfjs_1.BatchMatMul,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var _a = args.inputs,\n        a = _a.a,\n        b = _a.b;\n    var backend = args.backend;\n    var _b = args.attrs,\n        transposeA = _b.transposeA,\n        transposeB = _b.transposeB;\n    var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', a.dtype), {\n      name: 'adj_x',\n      type: backend.binding.TF_ATTR_BOOL,\n      value: transposeA\n    }, {\n      name: 'adj_y',\n      type: backend.binding.TF_ATTR_BOOL,\n      value: transposeB\n    }];\n    return backend.executeSingleOutput(tfjs_1.BatchMatMul, opAttrs, [a, b]);\n  }\n};","map":{"version":3,"sources":["/Users/johnlutz/Github/PocketReader/PocketReader/src/main/webapp/ui/node_modules/@tensorflow/tfjs-node/dist/kernels/BatchMatMul.js"],"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","batchMatMulConfig","kernelName","BatchMatMul","backendName","kernelFunc","args","_a","inputs","a","b","backend","_b","attrs","transposeA","transposeB","opAttrs","createTensorsTypeOpAttr","dtype","name","type","binding","TF_ATTR_BOOL","executeSingleOutput"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,0BAAD,CAArC;;AACAH,OAAO,CAACK,iBAAR,GAA4B;AACxBC,EAAAA,UAAU,EAAEJ,MAAM,CAACK,WADK;AAExBC,EAAAA,WAAW,EAAE,YAFW;AAGxBC,EAAAA,UAAU,EAAE,UAAUC,IAAV,EAAgB;AACxB,QAAIC,EAAE,GAAGD,IAAI,CAACE,MAAd;AAAA,QAAsBC,CAAC,GAAGF,EAAE,CAACE,CAA7B;AAAA,QAAgCC,CAAC,GAAGH,EAAE,CAACG,CAAvC;AACA,QAAIC,OAAO,GAAGL,IAAI,CAACK,OAAnB;AACA,QAAIC,EAAE,GAAGN,IAAI,CAACO,KAAd;AAAA,QAAqBC,UAAU,GAAGF,EAAE,CAACE,UAArC;AAAA,QAAiDC,UAAU,GAAGH,EAAE,CAACG,UAAjE;AACA,QAAIC,OAAO,GAAG,CACVhB,uBAAuB,CAACiB,uBAAxB,CAAgD,GAAhD,EAAqDR,CAAC,CAACS,KAAvD,CADU,EAEV;AAAEC,MAAAA,IAAI,EAAE,OAAR;AAAiBC,MAAAA,IAAI,EAAET,OAAO,CAACU,OAAR,CAAgBC,YAAvC;AAAqDzB,MAAAA,KAAK,EAAEiB;AAA5D,KAFU,EAGV;AAAEK,MAAAA,IAAI,EAAE,OAAR;AAAiBC,MAAAA,IAAI,EAAET,OAAO,CAACU,OAAR,CAAgBC,YAAvC;AAAqDzB,MAAAA,KAAK,EAAEkB;AAA5D,KAHU,CAAd;AAKA,WAAOJ,OAAO,CAACY,mBAAR,CAA4BzB,MAAM,CAACK,WAAnC,EAAgDa,OAAhD,EAAyD,CAACP,CAAD,EAAIC,CAAJ,CAAzD,CAAP;AACH;AAbuB,CAA5B","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.batchMatMulConfig = {\n    kernelName: tfjs_1.BatchMatMul,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var _a = args.inputs, a = _a.a, b = _a.b;\n        var backend = args.backend;\n        var _b = args.attrs, transposeA = _b.transposeA, transposeB = _b.transposeB;\n        var opAttrs = [\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', a.dtype),\n            { name: 'adj_x', type: backend.binding.TF_ATTR_BOOL, value: transposeA },\n            { name: 'adj_y', type: backend.binding.TF_ATTR_BOOL, value: transposeB }\n        ];\n        return backend.executeSingleOutput(tfjs_1.BatchMatMul, opAttrs, [a, b]);\n    }\n};\n"]},"metadata":{},"sourceType":"script"}