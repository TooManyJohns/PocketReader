{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar nodejs_kernel_backend_1 = require(\"./nodejs_kernel_backend\");\n\nvar SummaryFileWriter =\n/** @class */\nfunction () {\n  function SummaryFileWriter(resourceHandle) {\n    this.resourceHandle = resourceHandle;\n    nodejs_kernel_backend_1.ensureTensorflowBackend();\n    this.backend = nodejs_kernel_backend_1.nodeBackend();\n  }\n  /**\n   * Write a scalar summary.\n   *\n   * @param name A name of the summary. The summary tag for TensorBoard will be\n   *   this name.\n   * @param value A real numeric scalar value, as `tf.Scalar` or a JavaScript\n   *   `number`.\n   * @param step Required `int64`-castable, monotonically-increasing step value.\n   * @param description Optional long-form description for this summary, as a\n   *   `string`. *Not implemented yet*.\n   */\n\n\n  SummaryFileWriter.prototype.scalar = function (name, value, step, description) {\n    // N.B.: Unlike the Python TensorFlow API, step is a required parameter,\n    // because the construct of global step does not exist in TensorFlow.js.\n    if (description != null) {\n      throw new Error('scalar() does not support description yet');\n    }\n\n    this.backend.writeScalarSummary(this.resourceHandle, step, name, value);\n  };\n  /**\n   * Write a histogram summary, for later analysis in TensorBoard's 'Histograms'\n   * and 'Distributions' dashboards (data written using this API will appear in\n   * both places). Like `SummaryFileWriter.scalar` points, each histogram is\n   * associated with a `step` and a `name`. All the histograms with the same\n   * `name` constitute a time series of histograms.\n   *\n   * The histogram is calculated over all the elements of the given `Tensor`\n   * without regard to its shape or rank.\n   *\n   * @param name  A name for this summary. The summary tag used for TensorBoard\n   *     will be this name.\n   * @param data  A Tensor of any shape. The histogram is computed over its\n   *     elements, which must be castable to `float32`.\n   * @param step  Monotonically-increasing step value.\n   * @param buckets  Optional positive `number`. The output will have this many\n   *     buckets, except in two edge cases. If there is no data, then there are\n   *     no buckets. If there is data but all points have the same value, then\n   *     there is one bucket whose left and right endpoints are the same.\n   * @param description Optional long-form description for this summary, as a\n   *    `string`. Markdown is supported. Defaults to empty.\n   */\n\n\n  SummaryFileWriter.prototype.histogram = function (name, data, step, buckets, description) {\n    this.backend.writeHistogramSummary(this.resourceHandle, step, name, data, buckets, description);\n  };\n  /**\n   * Force summary writer to send all buffered data to storage.\n   */\n\n\n  SummaryFileWriter.prototype.flush = function () {\n    this.backend.flushSummaryWriter(this.resourceHandle);\n  };\n\n  return SummaryFileWriter;\n}();\n\nexports.SummaryFileWriter = SummaryFileWriter;\n/**\n * Use a cache for `SummaryFileWriter` instance.\n *\n * Using multiple instances of `SummaryFileWriter` pointing to the same\n * logdir has potential problems. Using this cache avoids those problems.\n */\n\nvar summaryFileWriterCache = {};\n/**\n * Create a summary file writer for TensorBoard.\n *\n * Example:\n * ```js\n * const tf = require('@tensorflow/tfjs-node');\n *\n * const summaryWriter = tf.node.summaryFileWriter('/tmp/tfjs_tb_logdir');\n *\n * for (let step = 0; step < 100; ++step) {\n *  summaryWriter.scalar('dummyValue', Math.sin(2 * Math.PI * step / 8), step);\n * }\n * ```\n *\n * @param logdir Log directory in which the summary data will be written.\n * @param maxQueue Maximum queue length (default: `10`).\n * @param flushMillis Flush every __ milliseconds (default: `120e3`, i.e,\n *   `120` seconds).\n * @param filenameSuffix Suffix of the protocol buffer file names to be\n *   written in the `logdir` (default: `.v2`).\n * @returns An instance of `SummaryFileWriter`.\n *\n * @doc {heading: 'TensorBoard', namespace: 'node'}\n */\n\nfunction summaryFileWriter(logdir, maxQueue, flushMillis, filenameSuffix) {\n  if (maxQueue === void 0) {\n    maxQueue = 10;\n  }\n\n  if (flushMillis === void 0) {\n    flushMillis = 120000;\n  }\n\n  if (filenameSuffix === void 0) {\n    filenameSuffix = '.v2';\n  }\n\n  tfjs_1.util.assert(logdir != null && typeof logdir === 'string' && logdir.length > 0, function () {\n    return \"Invalid logdir: \" + logdir + \". Expected a non-empty string for logdir.\";\n  });\n\n  if (!(logdir in summaryFileWriterCache)) {\n    nodejs_kernel_backend_1.ensureTensorflowBackend();\n    var backend = nodejs_kernel_backend_1.nodeBackend();\n    var writerResource = backend.summaryWriter(logdir);\n    backend.createSummaryFileWriter(writerResource, logdir, maxQueue, flushMillis, filenameSuffix);\n    summaryFileWriterCache[logdir] = new SummaryFileWriter(writerResource);\n  }\n\n  return summaryFileWriterCache[logdir];\n}\n\nexports.summaryFileWriter = summaryFileWriter;","map":{"version":3,"sources":["/Users/johnlutz/Github/PocketReader/PocketReader/src/main/webapp/ui/node_modules/@tensorflow/tfjs-node/dist/tensorboard.js"],"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","SummaryFileWriter","resourceHandle","ensureTensorflowBackend","backend","nodeBackend","prototype","scalar","name","step","description","Error","writeScalarSummary","histogram","data","buckets","writeHistogramSummary","flush","flushSummaryWriter","summaryFileWriterCache","summaryFileWriter","logdir","maxQueue","flushMillis","filenameSuffix","util","assert","length","writerResource","summaryWriter","createSummaryFileWriter"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"./nodejs_kernel_backend\");\nvar SummaryFileWriter = /** @class */ (function () {\n    function SummaryFileWriter(resourceHandle) {\n        this.resourceHandle = resourceHandle;\n        nodejs_kernel_backend_1.ensureTensorflowBackend();\n        this.backend = nodejs_kernel_backend_1.nodeBackend();\n    }\n    /**\n     * Write a scalar summary.\n     *\n     * @param name A name of the summary. The summary tag for TensorBoard will be\n     *   this name.\n     * @param value A real numeric scalar value, as `tf.Scalar` or a JavaScript\n     *   `number`.\n     * @param step Required `int64`-castable, monotonically-increasing step value.\n     * @param description Optional long-form description for this summary, as a\n     *   `string`. *Not implemented yet*.\n     */\n    SummaryFileWriter.prototype.scalar = function (name, value, step, description) {\n        // N.B.: Unlike the Python TensorFlow API, step is a required parameter,\n        // because the construct of global step does not exist in TensorFlow.js.\n        if (description != null) {\n            throw new Error('scalar() does not support description yet');\n        }\n        this.backend.writeScalarSummary(this.resourceHandle, step, name, value);\n    };\n    /**\n     * Write a histogram summary, for later analysis in TensorBoard's 'Histograms'\n     * and 'Distributions' dashboards (data written using this API will appear in\n     * both places). Like `SummaryFileWriter.scalar` points, each histogram is\n     * associated with a `step` and a `name`. All the histograms with the same\n     * `name` constitute a time series of histograms.\n     *\n     * The histogram is calculated over all the elements of the given `Tensor`\n     * without regard to its shape or rank.\n     *\n     * @param name  A name for this summary. The summary tag used for TensorBoard\n     *     will be this name.\n     * @param data  A Tensor of any shape. The histogram is computed over its\n     *     elements, which must be castable to `float32`.\n     * @param step  Monotonically-increasing step value.\n     * @param buckets  Optional positive `number`. The output will have this many\n     *     buckets, except in two edge cases. If there is no data, then there are\n     *     no buckets. If there is data but all points have the same value, then\n     *     there is one bucket whose left and right endpoints are the same.\n     * @param description Optional long-form description for this summary, as a\n     *    `string`. Markdown is supported. Defaults to empty.\n     */\n    SummaryFileWriter.prototype.histogram = function (name, data, step, buckets, description) {\n        this.backend.writeHistogramSummary(this.resourceHandle, step, name, data, buckets, description);\n    };\n    /**\n     * Force summary writer to send all buffered data to storage.\n     */\n    SummaryFileWriter.prototype.flush = function () {\n        this.backend.flushSummaryWriter(this.resourceHandle);\n    };\n    return SummaryFileWriter;\n}());\nexports.SummaryFileWriter = SummaryFileWriter;\n/**\n * Use a cache for `SummaryFileWriter` instance.\n *\n * Using multiple instances of `SummaryFileWriter` pointing to the same\n * logdir has potential problems. Using this cache avoids those problems.\n */\nvar summaryFileWriterCache = {};\n/**\n * Create a summary file writer for TensorBoard.\n *\n * Example:\n * ```js\n * const tf = require('@tensorflow/tfjs-node');\n *\n * const summaryWriter = tf.node.summaryFileWriter('/tmp/tfjs_tb_logdir');\n *\n * for (let step = 0; step < 100; ++step) {\n *  summaryWriter.scalar('dummyValue', Math.sin(2 * Math.PI * step / 8), step);\n * }\n * ```\n *\n * @param logdir Log directory in which the summary data will be written.\n * @param maxQueue Maximum queue length (default: `10`).\n * @param flushMillis Flush every __ milliseconds (default: `120e3`, i.e,\n *   `120` seconds).\n * @param filenameSuffix Suffix of the protocol buffer file names to be\n *   written in the `logdir` (default: `.v2`).\n * @returns An instance of `SummaryFileWriter`.\n *\n * @doc {heading: 'TensorBoard', namespace: 'node'}\n */\nfunction summaryFileWriter(logdir, maxQueue, flushMillis, filenameSuffix) {\n    if (maxQueue === void 0) { maxQueue = 10; }\n    if (flushMillis === void 0) { flushMillis = 120000; }\n    if (filenameSuffix === void 0) { filenameSuffix = '.v2'; }\n    tfjs_1.util.assert(logdir != null && typeof logdir === 'string' && logdir.length > 0, function () {\n        return \"Invalid logdir: \" + logdir + \". Expected a non-empty string for logdir.\";\n    });\n    if (!(logdir in summaryFileWriterCache)) {\n        nodejs_kernel_backend_1.ensureTensorflowBackend();\n        var backend = nodejs_kernel_backend_1.nodeBackend();\n        var writerResource = backend.summaryWriter(logdir);\n        backend.createSummaryFileWriter(writerResource, logdir, maxQueue, flushMillis, filenameSuffix);\n        summaryFileWriterCache[logdir] = new SummaryFileWriter(writerResource);\n    }\n    return summaryFileWriterCache[logdir];\n}\nexports.summaryFileWriter = summaryFileWriter;\n"]},"metadata":{},"sourceType":"script"}