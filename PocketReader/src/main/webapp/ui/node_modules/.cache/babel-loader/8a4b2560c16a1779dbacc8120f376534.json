{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\n\nexports.reverseConfig = {\n  kernelName: tfjs_1.Reverse,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var x = args.inputs.x;\n    var backend = args.backend;\n    var dims = args.attrs.dims;\n    var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('Tidx', 'int32'), nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype)];\n    var axes = tfjs_1.util.parseAxisParam(dims, x.shape);\n    var axisTensor = tfjs_1.tensor1d(axes, 'int32');\n    var res = backend.executeSingleOutput('ReverseV2', opAttrs, [x, axisTensor]);\n    axisTensor.dispose();\n    return res;\n  }\n};","map":{"version":3,"sources":["/Users/johnlutz/Github/PocketReader/PocketReader/src/main/webapp/ui/node_modules/@tensorflow/tfjs-node/dist/kernels/Reverse.js"],"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","reverseConfig","kernelName","Reverse","backendName","kernelFunc","args","x","inputs","backend","dims","attrs","opAttrs","createTensorsTypeOpAttr","dtype","axes","util","parseAxisParam","shape","axisTensor","tensor1d","res","executeSingleOutput","dispose"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,0BAAD,CAArC;;AACAH,OAAO,CAACK,aAAR,GAAwB;AACpBC,EAAAA,UAAU,EAAEJ,MAAM,CAACK,OADC;AAEpBC,EAAAA,WAAW,EAAE,YAFO;AAGpBC,EAAAA,UAAU,EAAE,UAAUC,IAAV,EAAgB;AACxB,QAAIC,CAAC,GAAGD,IAAI,CAACE,MAAL,CAAYD,CAApB;AACA,QAAIE,OAAO,GAAGH,IAAI,CAACG,OAAnB;AACA,QAAIC,IAAI,GAAGJ,IAAI,CAACK,KAAL,CAAWD,IAAtB;AACA,QAAIE,OAAO,GAAG,CACVZ,uBAAuB,CAACa,uBAAxB,CAAgD,MAAhD,EAAwD,OAAxD,CADU,EAEVb,uBAAuB,CAACa,uBAAxB,CAAgD,GAAhD,EAAqDN,CAAC,CAACO,KAAvD,CAFU,CAAd;AAIA,QAAIC,IAAI,GAAGjB,MAAM,CAACkB,IAAP,CAAYC,cAAZ,CAA2BP,IAA3B,EAAiCH,CAAC,CAACW,KAAnC,CAAX;AACA,QAAIC,UAAU,GAAGrB,MAAM,CAACsB,QAAP,CAAgBL,IAAhB,EAAsB,OAAtB,CAAjB;AACA,QAAIM,GAAG,GAAGZ,OAAO,CAACa,mBAAR,CAA4B,WAA5B,EAAyCV,OAAzC,EAAkD,CAACL,CAAD,EAAIY,UAAJ,CAAlD,CAAV;AACAA,IAAAA,UAAU,CAACI,OAAX;AACA,WAAOF,GAAP;AACH;AAhBmB,CAAxB","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.reverseConfig = {\n    kernelName: tfjs_1.Reverse,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var x = args.inputs.x;\n        var backend = args.backend;\n        var dims = args.attrs.dims;\n        var opAttrs = [\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('Tidx', 'int32'),\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype)\n        ];\n        var axes = tfjs_1.util.parseAxisParam(dims, x.shape);\n        var axisTensor = tfjs_1.tensor1d(axes, 'int32');\n        var res = backend.executeSingleOutput('ReverseV2', opAttrs, [x, axisTensor]);\n        axisTensor.dispose();\n        return res;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}