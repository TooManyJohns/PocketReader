{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\n\nexports.sliceConfig = {\n  kernelName: tfjs_1.Slice,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var x = args.inputs.x;\n    var backend = args.backend;\n    var _a = args.attrs,\n        begin = _a.begin,\n        size = _a.size;\n    var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype), nodejs_kernel_backend_1.createTensorsTypeOpAttr('Index', 'int32')]; // Bind tensor values\n\n    var _b = tfjs_1.backend_util.slice_util.parseSliceParams(x, begin, size),\n        begin_ = _b[0],\n        size_ = _b[1];\n\n    var beginTensor = tfjs_1.tensor1d(begin_, 'int32');\n    var sizeTensor = tfjs_1.tensor1d(size_, 'int32');\n    var res = backend.executeSingleOutput(tfjs_1.Slice, opAttrs, [x, beginTensor, sizeTensor]);\n    beginTensor.dispose();\n    sizeTensor.dispose();\n    return res;\n  }\n};","map":{"version":3,"sources":["/Users/johnlutz/Github/PocketReader/PocketReader/src/main/webapp/ui/node_modules/@tensorflow/tfjs-node/dist/kernels/Slice.js"],"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","sliceConfig","kernelName","Slice","backendName","kernelFunc","args","x","inputs","backend","_a","attrs","begin","size","opAttrs","createTensorsTypeOpAttr","dtype","_b","backend_util","slice_util","parseSliceParams","begin_","size_","beginTensor","tensor1d","sizeTensor","res","executeSingleOutput","dispose"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,0BAAD,CAArC;;AACAH,OAAO,CAACK,WAAR,GAAsB;AAClBC,EAAAA,UAAU,EAAEJ,MAAM,CAACK,KADD;AAElBC,EAAAA,WAAW,EAAE,YAFK;AAGlBC,EAAAA,UAAU,EAAE,UAAUC,IAAV,EAAgB;AACxB,QAAIC,CAAC,GAAGD,IAAI,CAACE,MAAL,CAAYD,CAApB;AACA,QAAIE,OAAO,GAAGH,IAAI,CAACG,OAAnB;AACA,QAAIC,EAAE,GAAGJ,IAAI,CAACK,KAAd;AAAA,QAAqBC,KAAK,GAAGF,EAAE,CAACE,KAAhC;AAAA,QAAuCC,IAAI,GAAGH,EAAE,CAACG,IAAjD;AACA,QAAIC,OAAO,GAAG,CACVd,uBAAuB,CAACe,uBAAxB,CAAgD,GAAhD,EAAqDR,CAAC,CAACS,KAAvD,CADU,EAEVhB,uBAAuB,CAACe,uBAAxB,CAAgD,OAAhD,EAAyD,OAAzD,CAFU,CAAd,CAJwB,CAQxB;;AACA,QAAIE,EAAE,GAAGnB,MAAM,CAACoB,YAAP,CAAoBC,UAApB,CAA+BC,gBAA/B,CAAgDb,CAAhD,EAAmDK,KAAnD,EAA0DC,IAA1D,CAAT;AAAA,QAA0EQ,MAAM,GAAGJ,EAAE,CAAC,CAAD,CAArF;AAAA,QAA0FK,KAAK,GAAGL,EAAE,CAAC,CAAD,CAApG;;AACA,QAAIM,WAAW,GAAGzB,MAAM,CAAC0B,QAAP,CAAgBH,MAAhB,EAAwB,OAAxB,CAAlB;AACA,QAAII,UAAU,GAAG3B,MAAM,CAAC0B,QAAP,CAAgBF,KAAhB,EAAuB,OAAvB,CAAjB;AACA,QAAII,GAAG,GAAGjB,OAAO,CAACkB,mBAAR,CAA4B7B,MAAM,CAACK,KAAnC,EAA0CW,OAA1C,EAAmD,CAACP,CAAD,EAAIgB,WAAJ,EAAiBE,UAAjB,CAAnD,CAAV;AACAF,IAAAA,WAAW,CAACK,OAAZ;AACAH,IAAAA,UAAU,CAACG,OAAX;AACA,WAAOF,GAAP;AACH;AAnBiB,CAAtB","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.sliceConfig = {\n    kernelName: tfjs_1.Slice,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var x = args.inputs.x;\n        var backend = args.backend;\n        var _a = args.attrs, begin = _a.begin, size = _a.size;\n        var opAttrs = [\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype),\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('Index', 'int32')\n        ];\n        // Bind tensor values\n        var _b = tfjs_1.backend_util.slice_util.parseSliceParams(x, begin, size), begin_ = _b[0], size_ = _b[1];\n        var beginTensor = tfjs_1.tensor1d(begin_, 'int32');\n        var sizeTensor = tfjs_1.tensor1d(size_, 'int32');\n        var res = backend.executeSingleOutput(tfjs_1.Slice, opAttrs, [x, beginTensor, sizeTensor]);\n        beginTensor.dispose();\n        sizeTensor.dispose();\n        return res;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}