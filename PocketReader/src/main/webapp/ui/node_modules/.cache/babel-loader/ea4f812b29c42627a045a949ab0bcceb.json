{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\n\nexports.splitVConfig = {\n  kernelName: tfjs_1.SplitV,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var x = args.inputs.x;\n    var backend = args.backend;\n    var _a = args.attrs,\n        numOrSizeSplits = _a.numOrSizeSplits,\n        axis = _a.axis;\n    var $axis = tfjs_1.util.parseAxisParam(axis, x.shape)[0];\n    var splitSizes = tfjs_1.backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n    var opAttrs = [{\n      name: 'num_split',\n      type: backend.binding.TF_ATTR_INT,\n      value: splitSizes.length\n    }, nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x), {\n      name: 'Tlen',\n      type: backend.binding.TF_ATTR_TYPE,\n      value: backend.binding.TF_INT32\n    }];\n    var inputs = [x];\n    return tfjs_1.tidy(function () {\n      inputs.push(tfjs_1.tensor1d(splitSizes, 'int32'));\n      inputs.push(tfjs_1.scalar($axis, 'int32'));\n      return backend.executeMultipleOutputs(tfjs_1.SplitV, opAttrs, inputs, splitSizes.length);\n    });\n  }\n};","map":{"version":3,"sources":["/Users/johnlutz/Github/PocketReader/PocketReader/src/main/webapp/ui/node_modules/@tensorflow/tfjs-node/dist/kernels/SplitV.js"],"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","splitVConfig","kernelName","SplitV","backendName","kernelFunc","args","x","inputs","backend","_a","attrs","numOrSizeSplits","axis","$axis","util","parseAxisParam","shape","splitSizes","backend_util","prepareSplitSize","opAttrs","name","type","binding","TF_ATTR_INT","length","createTensorsTypeOpAttr","TF_ATTR_TYPE","TF_INT32","tidy","push","tensor1d","scalar","executeMultipleOutputs"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,0BAAD,CAArC;;AACAH,OAAO,CAACK,YAAR,GAAuB;AACnBC,EAAAA,UAAU,EAAEJ,MAAM,CAACK,MADA;AAEnBC,EAAAA,WAAW,EAAE,YAFM;AAGnBC,EAAAA,UAAU,EAAE,UAAUC,IAAV,EAAgB;AACxB,QAAIC,CAAC,GAAGD,IAAI,CAACE,MAAL,CAAYD,CAApB;AACA,QAAIE,OAAO,GAAGH,IAAI,CAACG,OAAnB;AACA,QAAIC,EAAE,GAAGJ,IAAI,CAACK,KAAd;AAAA,QAAqBC,eAAe,GAAGF,EAAE,CAACE,eAA1C;AAAA,QAA2DC,IAAI,GAAGH,EAAE,CAACG,IAArE;AACA,QAAIC,KAAK,GAAGhB,MAAM,CAACiB,IAAP,CAAYC,cAAZ,CAA2BH,IAA3B,EAAiCN,CAAC,CAACU,KAAnC,EAA0C,CAA1C,CAAZ;AACA,QAAIC,UAAU,GAAGpB,MAAM,CAACqB,YAAP,CAAoBC,gBAApB,CAAqCb,CAArC,EAAwCK,eAAxC,EAAyDE,KAAzD,CAAjB;AACA,QAAIO,OAAO,GAAG,CACV;AACIC,MAAAA,IAAI,EAAE,WADV;AAEIC,MAAAA,IAAI,EAAEd,OAAO,CAACe,OAAR,CAAgBC,WAF1B;AAGI5B,MAAAA,KAAK,EAAEqB,UAAU,CAACQ;AAHtB,KADU,EAMV1B,uBAAuB,CAAC2B,uBAAxB,CAAgD,GAAhD,EAAqDpB,CAArD,CANU,EAM+C;AACrDe,MAAAA,IAAI,EAAE,MAD+C;AAErDC,MAAAA,IAAI,EAAEd,OAAO,CAACe,OAAR,CAAgBI,YAF+B;AAGrD/B,MAAAA,KAAK,EAAEY,OAAO,CAACe,OAAR,CAAgBK;AAH8B,KAN/C,CAAd;AAYA,QAAIrB,MAAM,GAAG,CAACD,CAAD,CAAb;AACA,WAAOT,MAAM,CAACgC,IAAP,CAAY,YAAY;AAC3BtB,MAAAA,MAAM,CAACuB,IAAP,CAAYjC,MAAM,CAACkC,QAAP,CAAgBd,UAAhB,EAA4B,OAA5B,CAAZ;AACAV,MAAAA,MAAM,CAACuB,IAAP,CAAYjC,MAAM,CAACmC,MAAP,CAAcnB,KAAd,EAAqB,OAArB,CAAZ;AACA,aAAOL,OAAO,CAACyB,sBAAR,CAA+BpC,MAAM,CAACK,MAAtC,EAA8CkB,OAA9C,EAAuDb,MAAvD,EAA+DU,UAAU,CAACQ,MAA1E,CAAP;AACH,KAJM,CAAP;AAKH;AA3BkB,CAAvB","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.splitVConfig = {\n    kernelName: tfjs_1.SplitV,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var x = args.inputs.x;\n        var backend = args.backend;\n        var _a = args.attrs, numOrSizeSplits = _a.numOrSizeSplits, axis = _a.axis;\n        var $axis = tfjs_1.util.parseAxisParam(axis, x.shape)[0];\n        var splitSizes = tfjs_1.backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n        var opAttrs = [\n            {\n                name: 'num_split',\n                type: backend.binding.TF_ATTR_INT,\n                value: splitSizes.length\n            },\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x), {\n                name: 'Tlen',\n                type: backend.binding.TF_ATTR_TYPE,\n                value: backend.binding.TF_INT32\n            }\n        ];\n        var inputs = [x];\n        return tfjs_1.tidy(function () {\n            inputs.push(tfjs_1.tensor1d(splitSizes, 'int32'));\n            inputs.push(tfjs_1.scalar($axis, 'int32'));\n            return backend.executeMultipleOutputs(tfjs_1.SplitV, opAttrs, inputs, splitSizes.length);\n        });\n    }\n};\n"]},"metadata":{},"sourceType":"script"}