{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\n\nexports.conv2DConfig = {\n  kernelName: tfjs_1.Conv2D,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var _a = args.inputs,\n        x = _a.x,\n        filter = _a.filter;\n    var backend = args.backend;\n    var _b = args.attrs,\n        strides = _b.strides,\n        pad = _b.pad,\n        dataFormat = _b.dataFormat,\n        dilations = _b.dilations,\n        dimRoundingMode = _b.dimRoundingMode;\n    var $dataFormat = tfjs_1.backend_util.convertConv2DDataFormat(dataFormat);\n    var convInfo = tfjs_1.backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false\n    /* depthwise */\n    , $dataFormat);\n    return conv2dImpl(x, filter, convInfo, backend);\n  }\n};\n\nfunction conv2dImpl(x, filter, convInfo, backend) {\n  if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME' && convInfo.padInfo.type !== 'EXPLICIT') {\n    throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + (\"while padding was \" + convInfo.padInfo.type));\n  }\n\n  var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n  var padding = convInfo.padInfo.type;\n  var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n  var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n  var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype), {\n    name: 'strides',\n    type: backend.binding.TF_ATTR_INT,\n    value: strides\n  }, {\n    name: 'padding',\n    type: backend.binding.TF_ATTR_STRING,\n    value: padding\n  }, {\n    name: 'data_format',\n    type: backend.binding.TF_ATTR_STRING,\n    value: dataFormat\n  }, {\n    name: 'use_cudnn_on_gpu',\n    type: backend.binding.TF_ATTR_BOOL,\n    value: true\n  }, {\n    name: 'dilations',\n    type: backend.binding.TF_ATTR_INT,\n    value: dilations\n  }];\n\n  if (padding === 'EXPLICIT') {\n    var padValue = [convInfo.padInfo.top, convInfo.padInfo.bottom, convInfo.padInfo.left, convInfo.padInfo.right];\n    opAttrs.push({\n      name: 'explicit_paddings',\n      type: backend.binding.TF_ATTR_INT,\n      value: dataFormat === 'NHWC' ? [0, 0].concat(padValue, [0, 0]) : [0, 0, 0, 0].concat(padValue)\n    });\n  }\n\n  return backend.executeSingleOutput(tfjs_1.Conv2D, opAttrs, [x, filter]);\n}\n\nexports.conv2dImpl = conv2dImpl;","map":{"version":3,"sources":["/Users/johnlutz/Github/PocketReader/PocketReader/src/main/webapp/ui/node_modules/@tensorflow/tfjs-node/dist/kernels/Conv2D.js"],"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","conv2DConfig","kernelName","Conv2D","backendName","kernelFunc","args","_a","inputs","x","filter","backend","_b","attrs","strides","pad","dataFormat","dilations","dimRoundingMode","$dataFormat","backend_util","convertConv2DDataFormat","convInfo","computeConv2DInfo","shape","conv2dImpl","padInfo","type","Error","strideHeight","strideWidth","padding","dilationHeight","dilationWidth","opAttrs","createTensorsTypeOpAttr","dtype","name","binding","TF_ATTR_INT","TF_ATTR_STRING","TF_ATTR_BOOL","padValue","top","bottom","left","right","push","concat","executeSingleOutput"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.conv2DConfig = {\n    kernelName: tfjs_1.Conv2D,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var _a = args.inputs, x = _a.x, filter = _a.filter;\n        var backend = args.backend;\n        var _b = args.attrs, strides = _b.strides, pad = _b.pad, dataFormat = _b.dataFormat, dilations = _b.dilations, dimRoundingMode = _b.dimRoundingMode;\n        var $dataFormat = tfjs_1.backend_util.convertConv2DDataFormat(dataFormat);\n        var convInfo = tfjs_1.backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n        return conv2dImpl(x, filter, convInfo, backend);\n    }\n};\nfunction conv2dImpl(x, filter, convInfo, backend) {\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME' &&\n        convInfo.padInfo.type !== 'EXPLICIT') {\n        throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n            (\"while padding was \" + convInfo.padInfo.type));\n    }\n    var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n    var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n    var opAttrs = [\n        nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype),\n        { name: 'strides', type: backend.binding.TF_ATTR_INT, value: strides },\n        { name: 'padding', type: backend.binding.TF_ATTR_STRING, value: padding },\n        {\n            name: 'data_format',\n            type: backend.binding.TF_ATTR_STRING,\n            value: dataFormat\n        },\n        { name: 'use_cudnn_on_gpu', type: backend.binding.TF_ATTR_BOOL, value: true },\n        { name: 'dilations', type: backend.binding.TF_ATTR_INT, value: dilations },\n    ];\n    if (padding === 'EXPLICIT') {\n        var padValue = [\n            convInfo.padInfo.top, convInfo.padInfo.bottom, convInfo.padInfo.left,\n            convInfo.padInfo.right\n        ];\n        opAttrs.push({\n            name: 'explicit_paddings',\n            type: backend.binding.TF_ATTR_INT,\n            value: dataFormat === 'NHWC' ? [0, 0].concat(padValue, [0, 0]) : [0, 0, 0, 0].concat(padValue)\n        });\n    }\n    return backend.executeSingleOutput(tfjs_1.Conv2D, opAttrs, [x, filter]);\n}\nexports.conv2dImpl = conv2dImpl;\n"]},"metadata":{},"sourceType":"script"}