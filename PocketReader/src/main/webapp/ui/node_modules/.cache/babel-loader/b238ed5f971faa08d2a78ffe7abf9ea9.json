{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\n\nexports.maxPool3DGradConfig = {\n  kernelName: tfjs_1.MaxPool3DGrad,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var _a = args.inputs,\n        dy = _a.dy,\n        input = _a.input,\n        output = _a.output;\n    var backend = args.backend;\n    var _b = args.attrs,\n        filterSize = _b.filterSize,\n        strides = _b.strides,\n        pad = _b.pad,\n        dimRoundingMode = _b.dimRoundingMode;\n    var convInfo = tfjs_1.backend_util.computePool3DInfo(input.shape, filterSize, strides, 1\n    /* dilations */\n    , pad, dimRoundingMode);\n\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n      throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + (\"while padding type was \" + convInfo.padInfo.type));\n    }\n\n    var ksize = [1, convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth, 1];\n    var $strides = [1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n    var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', input.dtype), {\n      name: 'ksize',\n      type: backend.binding.TF_ATTR_INT,\n      value: ksize\n    }, {\n      name: 'strides',\n      type: backend.binding.TF_ATTR_INT,\n      value: $strides\n    }, {\n      name: 'padding',\n      type: backend.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: backend.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }];\n    return backend.executeSingleOutput(tfjs_1.MaxPool3DGrad, opAttrs, [input, output, dy]);\n  }\n};","map":{"version":3,"sources":["/Users/johnlutz/Github/PocketReader/PocketReader/src/main/webapp/ui/node_modules/@tensorflow/tfjs-node/dist/kernels/MaxPool3DGrad.js"],"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","maxPool3DGradConfig","kernelName","MaxPool3DGrad","backendName","kernelFunc","args","_a","inputs","dy","input","output","backend","_b","attrs","filterSize","strides","pad","dimRoundingMode","convInfo","backend_util","computePool3DInfo","shape","padInfo","type","Error","ksize","filterDepth","filterHeight","filterWidth","$strides","strideDepth","strideHeight","strideWidth","padding","dataFormat","opAttrs","createTensorsTypeOpAttr","dtype","name","binding","TF_ATTR_INT","TF_ATTR_STRING","executeSingleOutput"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.maxPool3DGradConfig = {\n    kernelName: tfjs_1.MaxPool3DGrad,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var _a = args.inputs, dy = _a.dy, input = _a.input, output = _a.output;\n        var backend = args.backend;\n        var _b = args.attrs, filterSize = _b.filterSize, strides = _b.strides, pad = _b.pad, dimRoundingMode = _b.dimRoundingMode;\n        var convInfo = tfjs_1.backend_util.computePool3DInfo(input.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n        if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n            throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n                (\"while padding type was \" + convInfo.padInfo.type));\n        }\n        var ksize = [\n            1, convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth, 1\n        ];\n        var $strides = [\n            1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1\n        ];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n        var opAttrs = [\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', input.dtype),\n            { name: 'ksize', type: backend.binding.TF_ATTR_INT, value: ksize },\n            { name: 'strides', type: backend.binding.TF_ATTR_INT, value: $strides },\n            { name: 'padding', type: backend.binding.TF_ATTR_STRING, value: padding },\n            {\n                name: 'data_format',\n                type: backend.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n        ];\n        return backend.executeSingleOutput(tfjs_1.MaxPool3DGrad, opAttrs, [input, output, dy]);\n    }\n};\n"]},"metadata":{},"sourceType":"script"}