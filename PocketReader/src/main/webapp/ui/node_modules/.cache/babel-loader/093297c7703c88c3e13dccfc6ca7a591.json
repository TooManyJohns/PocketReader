{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar Conv2D_1 = require(\"./Conv2D\");\n\nexports.fusedConv2DConfig = {\n  kernelName: tfjs_1.FusedConv2D,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var _a = args.inputs,\n        x = _a.x,\n        filter = _a.filter,\n        bias = _a.bias,\n        preluActivationWeights = _a.preluActivationWeights;\n    var backend = args.backend;\n    var _b = args.attrs,\n        strides = _b.strides,\n        pad = _b.pad,\n        dataFormat = _b.dataFormat,\n        dilations = _b.dilations,\n        dimRoundingMode = _b.dimRoundingMode,\n        activation = _b.activation,\n        leakyreluAlpha = _b.leakyreluAlpha;\n    var $dataFormat = tfjs_1.backend_util.convertConv2DDataFormat(dataFormat);\n    var convInfo = tfjs_1.backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false\n    /* depthwise */\n    , $dataFormat);\n    var result = Conv2D_1.conv2dImpl(x, filter, convInfo, backend);\n    var toDispose = [];\n\n    if (bias != null) {\n      toDispose.push(result);\n      result = tfjs_1.add(result, bias);\n    }\n\n    var temp = result;\n    result = backend.applyActivation(result, activation, preluActivationWeights, leakyreluAlpha);\n\n    if (temp !== result) {\n      toDispose.push(temp);\n    }\n\n    toDispose.forEach(function (t) {\n      return t.dispose();\n    });\n    return result;\n  }\n};","map":{"version":3,"sources":["/Users/johnlutz/Github/PocketReader/PocketReader/src/main/webapp/ui/node_modules/@tensorflow/tfjs-node/dist/kernels/FusedConv2D.js"],"names":["Object","defineProperty","exports","value","tfjs_1","require","Conv2D_1","fusedConv2DConfig","kernelName","FusedConv2D","backendName","kernelFunc","args","_a","inputs","x","filter","bias","preluActivationWeights","backend","_b","attrs","strides","pad","dataFormat","dilations","dimRoundingMode","activation","leakyreluAlpha","$dataFormat","backend_util","convertConv2DDataFormat","convInfo","computeConv2DInfo","shape","result","conv2dImpl","toDispose","push","add","temp","applyActivation","forEach","t","dispose"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAtB;;AACAH,OAAO,CAACK,iBAAR,GAA4B;AACxBC,EAAAA,UAAU,EAAEJ,MAAM,CAACK,WADK;AAExBC,EAAAA,WAAW,EAAE,YAFW;AAGxBC,EAAAA,UAAU,EAAE,UAAUC,IAAV,EAAgB;AACxB,QAAIC,EAAE,GAAGD,IAAI,CAACE,MAAd;AAAA,QAAsBC,CAAC,GAAGF,EAAE,CAACE,CAA7B;AAAA,QAAgCC,MAAM,GAAGH,EAAE,CAACG,MAA5C;AAAA,QAAoDC,IAAI,GAAGJ,EAAE,CAACI,IAA9D;AAAA,QAAoEC,sBAAsB,GAAGL,EAAE,CAACK,sBAAhG;AACA,QAAIC,OAAO,GAAGP,IAAI,CAACO,OAAnB;AACA,QAAIC,EAAE,GAAGR,IAAI,CAACS,KAAd;AAAA,QAAqBC,OAAO,GAAGF,EAAE,CAACE,OAAlC;AAAA,QAA2CC,GAAG,GAAGH,EAAE,CAACG,GAApD;AAAA,QAAyDC,UAAU,GAAGJ,EAAE,CAACI,UAAzE;AAAA,QAAqFC,SAAS,GAAGL,EAAE,CAACK,SAApG;AAAA,QAA+GC,eAAe,GAAGN,EAAE,CAACM,eAApI;AAAA,QAAqJC,UAAU,GAAGP,EAAE,CAACO,UAArK;AAAA,QAAiLC,cAAc,GAAGR,EAAE,CAACQ,cAArM;AACA,QAAIC,WAAW,GAAGzB,MAAM,CAAC0B,YAAP,CAAoBC,uBAApB,CAA4CP,UAA5C,CAAlB;AACA,QAAIQ,QAAQ,GAAG5B,MAAM,CAAC0B,YAAP,CAAoBG,iBAApB,CAAsClB,CAAC,CAACmB,KAAxC,EAA+ClB,MAAM,CAACkB,KAAtD,EAA6DZ,OAA7D,EAAsEG,SAAtE,EAAiFF,GAAjF,EAAsFG,eAAtF,EAAuG;AAAM;AAA7G,MAA8HG,WAA9H,CAAf;AACA,QAAIM,MAAM,GAAG7B,QAAQ,CAAC8B,UAAT,CAAoBrB,CAApB,EAAuBC,MAAvB,EAA+BgB,QAA/B,EAAyCb,OAAzC,CAAb;AACA,QAAIkB,SAAS,GAAG,EAAhB;;AACA,QAAIpB,IAAI,IAAI,IAAZ,EAAkB;AACdoB,MAAAA,SAAS,CAACC,IAAV,CAAeH,MAAf;AACAA,MAAAA,MAAM,GAAG/B,MAAM,CAACmC,GAAP,CAAWJ,MAAX,EAAmBlB,IAAnB,CAAT;AACH;;AACD,QAAIuB,IAAI,GAAGL,MAAX;AACAA,IAAAA,MAAM,GAAGhB,OAAO,CAACsB,eAAR,CAAwBN,MAAxB,EAAgCR,UAAhC,EAA4CT,sBAA5C,EAAoEU,cAApE,CAAT;;AACA,QAAIY,IAAI,KAAKL,MAAb,EAAqB;AACjBE,MAAAA,SAAS,CAACC,IAAV,CAAeE,IAAf;AACH;;AACDH,IAAAA,SAAS,CAACK,OAAV,CAAkB,UAAUC,CAAV,EAAa;AAAE,aAAOA,CAAC,CAACC,OAAF,EAAP;AAAqB,KAAtD;AACA,WAAOT,MAAP;AACH;AAtBuB,CAA5B","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar Conv2D_1 = require(\"./Conv2D\");\nexports.fusedConv2DConfig = {\n    kernelName: tfjs_1.FusedConv2D,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var _a = args.inputs, x = _a.x, filter = _a.filter, bias = _a.bias, preluActivationWeights = _a.preluActivationWeights;\n        var backend = args.backend;\n        var _b = args.attrs, strides = _b.strides, pad = _b.pad, dataFormat = _b.dataFormat, dilations = _b.dilations, dimRoundingMode = _b.dimRoundingMode, activation = _b.activation, leakyreluAlpha = _b.leakyreluAlpha;\n        var $dataFormat = tfjs_1.backend_util.convertConv2DDataFormat(dataFormat);\n        var convInfo = tfjs_1.backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n        var result = Conv2D_1.conv2dImpl(x, filter, convInfo, backend);\n        var toDispose = [];\n        if (bias != null) {\n            toDispose.push(result);\n            result = tfjs_1.add(result, bias);\n        }\n        var temp = result;\n        result = backend.applyActivation(result, activation, preluActivationWeights, leakyreluAlpha);\n        if (temp !== result) {\n            toDispose.push(temp);\n        }\n        toDispose.forEach(function (t) { return t.dispose(); });\n        return result;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}