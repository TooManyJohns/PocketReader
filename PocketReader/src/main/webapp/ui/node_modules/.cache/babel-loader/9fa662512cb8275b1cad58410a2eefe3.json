{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tf = require(\"@tensorflow/tfjs\");\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar util_1 = require(\"util\");\n\nvar int64_tensors_1 = require(\"./int64_tensors\"); // tslint:disable-next-line:no-require-imports\n\n\nvar messages = require('./proto/api_pb');\n\nvar NodeJSKernelBackend =\n/** @class */\nfunction (_super) {\n  __extends(NodeJSKernelBackend, _super);\n\n  function NodeJSKernelBackend(binding, packageName) {\n    var _this = _super.call(this) || this;\n\n    _this.binding = binding;\n    _this.isGPUPackage = packageName === '@tensorflow/tfjs-node-gpu';\n    _this.isUsingGpuDevice = _this.binding.isUsingGpuDevice();\n    _this.tensorMap = new tf.DataStorage(_this, tf.engine());\n    return _this;\n  }\n\n  NodeJSKernelBackend.prototype.getDTypeInteger = function (dtype) {\n    switch (dtype) {\n      case 'float32':\n        return this.binding.TF_FLOAT;\n\n      case 'int32':\n        return this.binding.TF_INT32;\n\n      case 'bool':\n        return this.binding.TF_BOOL;\n\n      case 'complex64':\n        return this.binding.TF_COMPLEX64;\n\n      case 'string':\n        return this.binding.TF_STRING;\n\n      default:\n        throw new Error(\"Unsupported DType: \" + dtype);\n    }\n  };\n\n  NodeJSKernelBackend.prototype.typeAttributeFromTensor = function (value) {\n    return this.getDTypeInteger(value.dtype);\n  }; // Creates a new Tensor and maps the dataId to the passed in ID.\n\n\n  NodeJSKernelBackend.prototype.createOutputTensor = function (metadata) {\n    var newId = {};\n    this.tensorMap.set(newId, {\n      shape: metadata.shape,\n      dtype: metadata.dtype,\n      id: metadata.id,\n      values: null,\n      refCount: 1\n    });\n    var dtype;\n\n    switch (metadata.dtype) {\n      case this.binding.TF_FLOAT:\n        dtype = 'float32';\n        break;\n\n      case this.binding.TF_INT32:\n        dtype = 'int32';\n        break;\n\n      case this.binding.TF_INT64:\n        console.warn('INT64 output tensor will be stored as BigInt64Array.'); // INT64 is not supported in TFJS yet, cast it to int32.\n\n        dtype = 'int32';\n        break;\n\n      case this.binding.TF_BOOL:\n        dtype = 'bool';\n        break;\n\n      case this.binding.TF_COMPLEX64:\n        dtype = 'complex64';\n        break;\n\n      case this.binding.TF_STRING:\n        dtype = 'string';\n        break;\n\n      case this.binding.TF_RESOURCE:\n        // NOTE(cais): We currently represent resource-type Tensors\n        // as string of ubytes.\n        dtype = 'string';\n        break;\n\n      case this.binding.TF_UINT8:\n        // TensorFlow uses UINT8 as dtype for image tensor. UINT8 is not\n        // supported in TFJS yet, cast it to int32.\n        dtype = 'int32';\n        break;\n\n      default:\n        throw new Error(\"Unknown dtype enum \" + metadata.dtype);\n    } // TODO(yassogba) Enable this once all the kernels are removed from backend.\n    // We can then change the return type from Tensor to TensorInfo.\n    // return {dataId: newId, shape: metadata.shape, dtype};\n\n\n    return tf.engine().makeTensorFromDataId(newId, metadata.shape, dtype);\n  }; // Prepares Tensor instances for Op execution.\n\n\n  NodeJSKernelBackend.prototype.getInputTensorIds = function (tensors) {\n    var ids = [];\n\n    for (var i = 0; i < tensors.length; i++) {\n      if (tensors[i] instanceof int64_tensors_1.Int64Scalar) {\n        // Then `tensors[i]` is a Int64Scalar, which we currently represent\n        // using an `Int32Array`.\n        var value = tensors[i].valueArray;\n        var id = this.binding.createTensor([], this.binding.TF_INT64, value);\n        ids.push(id);\n      } else {\n        var info = this.tensorMap.get(tensors[i].dataId); // TODO - what about ID in this case? Handle in write()??\n\n        if (info.values != null) {\n          // Values were delayed to write into the TensorHandle. Do that before\n          // Op execution and clear stored values.\n          info.id = this.binding.createTensor(info.shape, info.dtype, info.values);\n          info.values = null;\n        }\n\n        ids.push(info.id);\n      }\n    }\n\n    return ids;\n  };\n\n  NodeJSKernelBackend.prototype.createReductionOpAttrs = function (tensor, keepDims) {\n    if (keepDims === void 0) {\n      keepDims = false;\n    }\n\n    return [{\n      name: 'keep_dims',\n      type: this.binding.TF_ATTR_BOOL,\n      value: keepDims\n    }, createTensorsTypeOpAttr('T', tensor.dtype), createTensorsTypeOpAttr('Tidx', 'int32')];\n  };\n\n  NodeJSKernelBackend.prototype.floatPrecision = function () {\n    return 32;\n  };\n\n  NodeJSKernelBackend.prototype.epsilon = function () {\n    return _super.prototype.epsilon.call(this);\n  };\n  /**\n   * Executes an op that has a single input and output.\n   *\n   * Helper function to wrap executeSingleOutput in a particular case.\n   * @param name The name of the Op to execute.\n   * @param input The input Tensor for the Op.\n   */\n\n\n  NodeJSKernelBackend.prototype.executeSingleInput = function (name, input) {\n    var opAttrs = [createTensorsTypeOpAttr('T', input.dtype)];\n    return this.executeSingleOutput(name, opAttrs, [input]);\n  };\n  /**\n   * Executes a TensorFlow Eager Op that provides one output Tensor.\n   * @param name The name of the Op to execute.\n   * @param opAttrs The list of Op attributes required to execute.\n   * @param inputs The list of input Tensors for the Op.\n   * @return A resulting Tensor from Op execution.\n   */\n\n\n  NodeJSKernelBackend.prototype.executeSingleOutput = function (name, opAttrs, inputs) {\n    var outputMetadata = this.binding.executeOp(name, opAttrs, this.getInputTensorIds(inputs), 1);\n    return this.createOutputTensor(outputMetadata[0]);\n  };\n  /**\n   * Executes a TensorFlow Eager Op that provides multiple output Tensors.\n   * @param name The name of the Op to execute.\n   * @param opAttrs The list of Op attributes required to execute.\n   * @param inputs The list of input Tensors for the Op.\n   * @param numOutputs The number of output Tensors for Op execution.\n   * @return A resulting Tensor array from Op execution.\n   */\n\n\n  NodeJSKernelBackend.prototype.executeMultipleOutputs = function (name, opAttrs, inputs, numOutputs) {\n    var _this = this;\n\n    var outputMetadata = this.binding.executeOp(name, opAttrs, this.getInputTensorIds(inputs), numOutputs);\n    return outputMetadata.map(function (m) {\n      return _this.createOutputTensor(m);\n    });\n  };\n\n  NodeJSKernelBackend.prototype.numDataIds = function () {\n    return this.tensorMap.numDataIds();\n  };\n\n  NodeJSKernelBackend.prototype.dispose = function () {};\n\n  NodeJSKernelBackend.prototype.read = function (dataId) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.readSync(dataId)];\n      });\n    });\n  };\n\n  NodeJSKernelBackend.prototype.readSync = function (dataId) {\n    if (!this.tensorMap.has(dataId)) {\n      throw new Error(\"Tensor \" + dataId + \" was not registered!\");\n    }\n\n    var info = this.tensorMap.get(dataId);\n\n    if (info.values != null) {\n      return info.values;\n    } else {\n      return this.binding.tensorDataSync(info.id);\n    }\n  };\n  /**\n   * Dispose the memory if the dataId has 0 refCount. Return true if the memory\n   * is released, false otherwise.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n\n\n  NodeJSKernelBackend.prototype.disposeData = function (dataId, force) {\n    if (force === void 0) {\n      force = false;\n    } // No-op if already disposed.\n\n\n    if (this.tensorMap.has(dataId)) {\n      var id = this.tensorMap.get(dataId).id;\n      this.tensorMap.get(dataId).refCount--;\n\n      if (!force && this.tensorMap.get(dataId).refCount > 0) {\n        return false;\n      }\n\n      if (id != null && id >= 0) {\n        this.binding.deleteTensor(id);\n      }\n\n      this.tensorMap.delete(dataId);\n    }\n\n    return true;\n  };\n  /** Return refCount of a `TensorData`. */\n\n\n  NodeJSKernelBackend.prototype.refCount = function (dataId) {\n    if (this.tensorMap.has(dataId)) {\n      var tensorData = this.tensorMap.get(dataId);\n      return tensorData.refCount;\n    }\n\n    return 0;\n  };\n\n  NodeJSKernelBackend.prototype.incRef = function (dataId) {\n    this.tensorMap.get(dataId).refCount++;\n  };\n\n  NodeJSKernelBackend.prototype.move = function (dataId, values, shape, dtype, refCount) {\n    this.tensorMap.set(dataId, {\n      shape: shape,\n      dtype: getTFDType(dtype),\n      values: values,\n      id: -1,\n      refCount: refCount\n    });\n  };\n\n  NodeJSKernelBackend.prototype.write = function (values, shape, dtype) {\n    var dataId = {};\n    this.move(dataId, values, shape, dtype, 1);\n    return dataId;\n  };\n\n  NodeJSKernelBackend.prototype.applyActivation = function (input, activation, preluActivationWeights, leakyreluAlpha) {\n    var result = input;\n\n    if (activation != null) {\n      if (activation === 'linear') {// No-op\n      } else if (activation === 'relu') {\n        result = tf.relu(result);\n      } else if (activation === 'prelu') {\n        result = tf.prelu(result, preluActivationWeights);\n      } else if (activation === 'leakyrelu') {\n        result = tf.leakyRelu(result, leakyreluAlpha);\n      } else if (activation === 'elu') {\n        result = tf.elu(result);\n      } else if (activation === 'relu6') {\n        result = tf.relu6(result);\n      } else if (activation === 'sigmoid') {\n        result = tf.sigmoid(result);\n      } else {\n        throw new Error(\"Activation: \" + activation + \" has not been implemented for the Node.js backend\");\n      }\n    }\n\n    return result;\n  };\n\n  NodeJSKernelBackend.prototype.divide = function (a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n    return this.executeSingleOutput('Div', opAttrs, [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.divNoNan = function (a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n    return this.executeSingleOutput('DivNoNan', opAttrs, [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.where = function (condition) {\n    return this.executeSingleOutput('Where', [], [condition]);\n  };\n\n  NodeJSKernelBackend.prototype.topKValues = function (x, k) {\n    throw new Error('Method not implemented.');\n  };\n\n  NodeJSKernelBackend.prototype.topKIndices = function (x, k) {\n    throw new Error('Method not implemented.');\n  };\n\n  NodeJSKernelBackend.prototype.int = function (x) {\n    throw new Error('Method not implemented.');\n  };\n\n  NodeJSKernelBackend.prototype.decodeJpeg = function (contents, channels, ratio, fancyUpscaling, tryRecoverTruncated, acceptableFraction, dctMethod) {\n    var opAttrs = [{\n      name: 'channels',\n      type: this.binding.TF_ATTR_INT,\n      value: channels\n    }, {\n      name: 'ratio',\n      type: this.binding.TF_ATTR_INT,\n      value: ratio\n    }, {\n      name: 'fancy_upscaling',\n      type: this.binding.TF_ATTR_BOOL,\n      value: fancyUpscaling\n    }, {\n      name: 'try_recover_truncated',\n      type: this.binding.TF_ATTR_BOOL,\n      value: tryRecoverTruncated\n    }, {\n      name: 'acceptable_fraction',\n      type: this.binding.TF_ATTR_FLOAT,\n      value: acceptableFraction\n    }, {\n      name: 'dct_method',\n      type: this.binding.TF_ATTR_STRING,\n      value: dctMethod\n    }];\n    var inputArgs = [tfjs_1.scalar(contents, 'string')];\n    return this.executeSingleOutput('DecodeJpeg', opAttrs, inputArgs);\n  };\n\n  NodeJSKernelBackend.prototype.decodePng = function (contents, channels) {\n    var opAttrs = [{\n      name: 'channels',\n      type: this.binding.TF_ATTR_INT,\n      value: channels\n    }];\n    var inputArgs = [tfjs_1.scalar(contents, 'string')];\n    return this.executeSingleOutput('DecodePng', opAttrs, inputArgs);\n  };\n\n  NodeJSKernelBackend.prototype.decodeBmp = function (contents, channels) {\n    var opAttrs = [{\n      name: 'channels',\n      type: this.binding.TF_ATTR_INT,\n      value: channels\n    }];\n    var inputArgs = [tfjs_1.scalar(contents, 'string')];\n    return this.executeSingleOutput('DecodeBmp', opAttrs, inputArgs);\n  };\n\n  NodeJSKernelBackend.prototype.decodeGif = function (contents) {\n    var inputArgs = [tfjs_1.scalar(contents, 'string')];\n    return this.executeSingleOutput('DecodeGif', [], inputArgs);\n  };\n\n  NodeJSKernelBackend.prototype.executeEncodeImageOp = function (name, opAttrs, imageData, imageShape) {\n    var inputTensorId = this.binding.createTensor(imageShape, this.binding.TF_UINT8, imageData);\n    var outputMetadata = this.binding.executeOp(name, opAttrs, [inputTensorId], 1);\n    var outputTensorInfo = outputMetadata[0]; // prevent the tensor data from being converted to a UTF8 string, since\n    // the encoded data is not valid UTF8\n\n    outputTensorInfo.dtype = this.binding.TF_UINT8;\n    return this.createOutputTensor(outputTensorInfo);\n  };\n\n  NodeJSKernelBackend.prototype.encodeJpeg = function (imageData, imageShape, format, quality, progressive, optimizeSize, chromaDownsampling, densityUnit, xDensity, yDensity, xmpMetadata) {\n    var opAttrs = [{\n      name: 'format',\n      type: this.binding.TF_ATTR_STRING,\n      value: format\n    }, {\n      name: 'quality',\n      type: this.binding.TF_ATTR_INT,\n      value: quality\n    }, {\n      name: 'progressive',\n      type: this.binding.TF_ATTR_BOOL,\n      value: progressive\n    }, {\n      name: 'optimize_size',\n      type: this.binding.TF_ATTR_BOOL,\n      value: optimizeSize\n    }, {\n      name: 'chroma_downsampling',\n      type: this.binding.TF_ATTR_BOOL,\n      value: chromaDownsampling\n    }, {\n      name: 'density_unit',\n      type: this.binding.TF_ATTR_STRING,\n      value: densityUnit\n    }, {\n      name: 'x_density',\n      type: this.binding.TF_ATTR_INT,\n      value: xDensity\n    }, {\n      name: 'y_density',\n      type: this.binding.TF_ATTR_INT,\n      value: yDensity\n    }, {\n      name: 'xmp_metadata',\n      type: this.binding.TF_ATTR_STRING,\n      value: xmpMetadata\n    }];\n    return this.executeEncodeImageOp('EncodeJpeg', opAttrs, imageData, imageShape);\n  };\n\n  NodeJSKernelBackend.prototype.encodePng = function (imageData, imageShape, compression) {\n    var opAttrs = [{\n      name: 'compression',\n      type: this.binding.TF_ATTR_INT,\n      value: compression\n    }];\n    return this.executeEncodeImageOp('EncodePng', opAttrs, imageData, imageShape);\n  };\n\n  NodeJSKernelBackend.prototype.deleteSavedModel = function (id) {\n    this.binding.deleteSavedModel(id);\n  };\n\n  NodeJSKernelBackend.prototype.loadSavedModelMetaGraph = function (path, tags) {\n    return this.binding.loadSavedModel(path, tags);\n  };\n\n  NodeJSKernelBackend.prototype.getMappedInputTensorIds = function (inputs, inputTensorInfos) {\n    var tensorIds = this.getInputTensorIds(inputs);\n\n    for (var i = 0; i < inputs.length; i++) {\n      if (inputTensorInfos[i] != null) {\n        if (inputTensorInfos[i].tfDtype === 'DT_UINT8') {\n          var data = Uint8Array.from(inputs[i].dataSync());\n          var inputTensorId = this.binding.createTensor(inputs[i].shape, this.binding.TF_UINT8, data);\n          tensorIds[i] = inputTensorId;\n        } else if (inputTensorInfos[i].tfDtype === 'DT_INT64') {\n          var data = int64_tensors_1.encodeInt32ArrayAsInt64(inputs[i].dataSync());\n          var inputTensorId = this.binding.createTensor(inputs[i].shape, this.binding.TF_INT64, data);\n          tensorIds[i] = inputTensorId;\n        }\n      }\n    }\n\n    return tensorIds;\n  };\n\n  NodeJSKernelBackend.prototype.runSavedModel = function (id, inputs, inputTensorInfos, outputOpNames) {\n    var _this = this;\n\n    var outputMetadata = this.binding.runSavedModel(id, this.getMappedInputTensorIds(inputs, inputTensorInfos), inputTensorInfos.map(function (info) {\n      return info.name;\n    }).join(','), outputOpNames.join(','));\n    return outputMetadata.map(function (m) {\n      return _this.createOutputTensor(m);\n    });\n  }; // ------------------------------------------------------------\n  // TensorBoard-related (tfjs-node-specific) backend kernels.\n\n\n  NodeJSKernelBackend.prototype.summaryWriter = function (logdir) {\n    var opAttrs = [{\n      name: 'shared_name',\n      type: this.binding.TF_ATTR_STRING,\n      value: \"logdir:\" + logdir\n    }, {\n      name: 'container',\n      type: this.binding.TF_ATTR_STRING,\n      value: ''\n    }];\n    var writerResource = this.executeSingleOutput('SummaryWriter', opAttrs, []);\n    return writerResource;\n  };\n\n  NodeJSKernelBackend.prototype.createSummaryFileWriter = function (resourceHandle, logdir, maxQueue, flushMillis, filenameSuffix) {\n    var inputArgs = [resourceHandle, tfjs_1.scalar(logdir), tfjs_1.scalar(maxQueue == null ? 10 : maxQueue, 'int32'), tfjs_1.scalar(flushMillis == null ? 2 * 60 * 1000 : flushMillis, 'int32'), tfjs_1.scalar(filenameSuffix == null ? '.v2' : filenameSuffix)];\n    this.executeMultipleOutputs('CreateSummaryFileWriter', [], inputArgs, 0);\n  };\n\n  NodeJSKernelBackend.prototype.writeScalarSummary = function (resourceHandle, step, name, value) {\n    var _this = this;\n\n    tfjs_1.tidy(function () {\n      tfjs_1.util.assert(Number.isInteger(step), function () {\n        return \"step is expected to be an integer, but is instead \" + step;\n      });\n      var inputArgs = [resourceHandle, new int64_tensors_1.Int64Scalar(step), tfjs_1.scalar(name, 'string')];\n      var typeAttr;\n\n      if (typeof value === 'number') {\n        inputArgs.push(tfjs_1.scalar(value));\n        typeAttr = _this.binding.TF_FLOAT;\n      } else {\n        // `value` is a Scalar.\n        tfjs_1.util.assert(value.rank === 0, function () {\n          return \"A non-scalar tensor (rank \" + value.rank + \") is passed to \" + \"writeScalarSummary()\";\n        });\n        inputArgs.push(value);\n        typeAttr = _this.typeAttributeFromTensor(value);\n      }\n\n      var opAttrs = [{\n        name: 'T',\n        type: _this.binding.TF_ATTR_TYPE,\n        value: typeAttr\n      }];\n\n      _this.binding.executeOp('WriteScalarSummary', opAttrs, _this.getInputTensorIds(inputArgs), 0);\n    });\n  };\n\n  NodeJSKernelBackend.prototype.writeHistogramSummary = function (resourceHandle, step, name, data, bucketCount, description) {\n    var _this = this;\n\n    tfjs_1.tidy(function () {\n      tfjs_1.util.assert(Number.isInteger(step), function () {\n        return \"step is expected to be an integer, but is instead \" + step;\n      }); // We use the WriteSummary op, and not WriteHistogramSummary. The\n      // difference is that WriteHistogramSummary takes a tensor of any shape,\n      // and places the values in 30 buckets, while WriteSummary expects a\n      // tensor which already describes the bucket widths and counts.\n      //\n      // If we were to use WriteHistogramSummary, we wouldn't have to implement\n      // the \"bucketization\" of the input tensor, but we also wouldn't have\n      // control over the number of buckets, or the description of the graph.\n      //\n      // Therefore, we instead use WriteSummary, which makes it possible to\n      // support these features. However, the trade-off is that we have to\n      // implement our own \"bucketization\", and have to write the summary as a\n      // protobuf message.\n\n      var content = new messages.HistogramPluginData().setVersion(0);\n      var pluginData = new messages.SummaryMetadata.PluginData().setPluginName('histograms').setContent(content.serializeBinary());\n      var summary = new messages.SummaryMetadata().setPluginData(pluginData).setDisplayName(null).setSummaryDescription(description);\n      var summaryTensor = tfjs_1.scalar(summary.serializeBinary(), 'string');\n      var nameTensor = tfjs_1.scalar(name, 'string');\n      var stepScalar = new int64_tensors_1.Int64Scalar(step);\n\n      var buckets = _this.buckets(data, bucketCount);\n\n      tfjs_1.util.assert(buckets.rank === 2 && buckets.shape[1] === 3, function () {\n        return \"Expected buckets to have shape [k, 3], but they had shape \" + buckets.shape;\n      });\n      tfjs_1.util.assert(buckets.dtype === 'float32', function () {\n        return \"Expected buckets to have dtype float32, but they had dtype \" + buckets.dtype;\n      });\n      var inputArgs = [resourceHandle, stepScalar, buckets, nameTensor, summaryTensor];\n\n      var typeAttr = _this.typeAttributeFromTensor(buckets);\n\n      var opAttrs = [{\n        name: 'T',\n        type: _this.binding.TF_ATTR_TYPE,\n        value: typeAttr\n      }];\n\n      _this.binding.executeOp('WriteSummary', opAttrs, _this.getInputTensorIds(inputArgs), 0);\n    });\n  };\n\n  NodeJSKernelBackend.prototype.flushSummaryWriter = function (resourceHandle) {\n    var inputArgs = [resourceHandle];\n    this.executeMultipleOutputs('FlushSummaryWriter', [], inputArgs, 0);\n  };\n  /**\n   * Group data into histogram buckets.\n   *\n   * @param data A `Tensor` of any shape. Must be castable to `float32`\n   * @param bucketCount Optional positive `number`\n   * @returns A `Tensor` of shape `[k, 3]` and type `float32`. The `i`th row is\n   *   a triple `[leftEdge, rightEdge, count]` for a single bucket. The value of\n   *   `k` is either `bucketCount`, `1` or `0`.\n   */\n\n\n  NodeJSKernelBackend.prototype.buckets = function (data, bucketCount) {\n    if (data.size === 0) {\n      return tf.tensor([], [0, 3], 'float32');\n    } // 30 is the default number of buckets in the TensorFlow Python\n    // implementation. See\n    // https://github.com/tensorflow/tensorboard/blob/master/tensorboard/plugins/histogram/summary_v2.py\n\n\n    bucketCount = bucketCount !== undefined ? bucketCount : 30;\n    tfjs_1.util.assert(Number.isInteger(bucketCount) && bucketCount > 0, function () {\n      return \"Expected bucket count to be a strictly positive integer, but it was \" + (\"\" + bucketCount);\n    });\n    data = data.flatten();\n    data = data.cast('float32');\n    var min = data.min();\n    var max = data.max();\n    var range = max.sub(min);\n    var isSingular = range.equal(0).arraySync() !== 0;\n\n    if (isSingular) {\n      var center = min;\n      var bucketStart = center.sub(0.5);\n      var bucketEnd = center.add(0.5);\n      var bucketCounts_1 = tf.scalar(data.size, 'float32');\n      return tf.concat([bucketStart, bucketEnd, bucketCounts_1]).reshape([1, 3]);\n    }\n\n    var bucketWidth = range.div(bucketCount);\n    var offsets = data.sub(min);\n    var bucketIndices = offsets.floorDiv(bucketWidth).cast('int32');\n    var clampedIndices = tf.minimum(bucketIndices, bucketCount - 1).cast('int32');\n    var oneHots = tf.oneHot(clampedIndices, bucketCount);\n    var bucketCounts = oneHots.sum(0).cast('int32');\n    var edges = tf.linspace(min.arraySync(), max.arraySync(), bucketCount + 1); // Ensure last value in edges is max (TF's linspace op doesn't do this)\n\n    edges = tf.concat([edges.slice(0, bucketCount), max.reshape([1])], 0);\n    var leftEdges = edges.slice(0, bucketCount);\n    var rightEdges = edges.slice(1, bucketCount);\n    return tf.stack([leftEdges, rightEdges, bucketCounts.cast('float32')]).transpose();\n  }; // ~ TensorBoard-related (tfjs-node-specific) backend kernels.\n  // ------------------------------------------------------------\n\n\n  NodeJSKernelBackend.prototype.memory = function () {\n    // Due to automatic garbage collection, the numbers are unreliable.\n    // TODO(kreeger): Since there is finalization in C, count the true\n    // number of undisposed tensors.\n    return {\n      unreliable: true\n    };\n  };\n\n  NodeJSKernelBackend.prototype.time = function (f) {\n    return __awaiter(this, void 0, void 0, function () {\n      var start, elapsed;\n      return __generator(this, function (_a) {\n        start = process.hrtime();\n        f();\n        elapsed = process.hrtime(start);\n        return [2\n        /*return*/\n        , {\n          kernelMs: elapsed[0] * 1000 + elapsed[1] / 1000000\n        }];\n      });\n    });\n  };\n\n  NodeJSKernelBackend.prototype.getNumOfSavedModels = function () {\n    return this.binding.getNumOfSavedModels();\n  };\n\n  return NodeJSKernelBackend;\n}(tfjs_1.KernelBackend);\n\nexports.NodeJSKernelBackend = NodeJSKernelBackend;\n/** Returns an instance of the Node.js backend. */\n\nfunction nodeBackend() {\n  return tf.findBackend('tensorflow');\n}\n\nexports.nodeBackend = nodeBackend;\n/** Returns the TF dtype for a given DataType. */\n\nfunction getTFDType(dataType) {\n  var binding = nodeBackend().binding;\n\n  switch (dataType) {\n    case 'float32':\n      return binding.TF_FLOAT;\n\n    case 'int32':\n      return binding.TF_INT32;\n\n    case 'bool':\n      return binding.TF_BOOL;\n\n    case 'complex64':\n      return binding.TF_COMPLEX64;\n\n    case 'string':\n      return binding.TF_STRING;\n    // tslint:disable-next-line:no-any\n\n    case 'int64':\n      // int64 is not a generally supported dtype in TensorFlow.js\n      // (tfjs-core). However, it needs to be included here for the purpose of\n      // writing the `step` value to TensorBoard via WriteScalarSummary and\n      // other op kernels.\n      return binding.TF_INT64;\n\n    default:\n      var errorMessage = \"Unknown dtype: \" + dataType;\n      throw new Error(errorMessage);\n  }\n}\n\nexports.getTFDType = getTFDType;\n/**\n * Creates a TFEOpAttr for a 'type' OpDef attribute from a Tensor or list of\n * Tensors.\n */\n\nfunction createTensorsTypeOpAttr(attrName, tensorsOrDtype) {\n  if (util_1.isNullOrUndefined(tensorsOrDtype)) {\n    throw new Error('Invalid input tensors value.');\n  }\n\n  return {\n    name: attrName,\n    type: nodeBackend().binding.TF_ATTR_TYPE,\n    value: tensorsOrDtype instanceof tf.Tensor || Array.isArray(tensorsOrDtype) ? getTFDTypeForInputs(tensorsOrDtype) : getTFDType(tensorsOrDtype)\n  };\n}\n\nexports.createTensorsTypeOpAttr = createTensorsTypeOpAttr; // TODO(yassogba) remove? who uses this?\n\nfunction createOpAttr(attrName, tensorsOrDtype, value) {\n  if (util_1.isNullOrUndefined(tensorsOrDtype)) {\n    throw new Error('Invalid input tensors value.');\n  }\n\n  return {\n    name: attrName,\n    type: nodeBackend().binding.TF_BOOL,\n    value: value\n  };\n}\n\nexports.createOpAttr = createOpAttr;\n/** Returns the dtype number for a single or list of input Tensors. */\n\nfunction getTFDTypeForInputs(tensors) {\n  if (util_1.isNullOrUndefined(tensors)) {\n    throw new Error('Invalid input tensors value.');\n  }\n\n  if (util_1.isArray(tensors)) {\n    for (var i = 0; i < tensors.length; i++) {\n      return getTFDType(tensors[i].dtype);\n    }\n\n    return -1;\n  } else {\n    return getTFDType(tensors.dtype);\n  }\n}\n\nfunction ensureTensorflowBackend() {\n  tf.util.assert(tf.getBackend() === 'tensorflow', function () {\n    return \"Expect the current backend to be \\\"tensorflow\\\", but got \\\"\" + tf.getBackend() + \"\\\"\";\n  });\n}\n\nexports.ensureTensorflowBackend = ensureTensorflowBackend;","map":{"version":3,"sources":["/Users/johnlutz/Github/PocketReader/PocketReader/src/main/webapp/ui/node_modules/@tensorflow/tfjs-node/dist/nodejs_kernel_backend.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","_","label","sent","t","trys","ops","f","y","g","verb","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","defineProperty","exports","tf","require","tfjs_1","util_1","int64_tensors_1","messages","NodeJSKernelBackend","_super","binding","packageName","_this","isGPUPackage","isUsingGpuDevice","tensorMap","DataStorage","engine","getDTypeInteger","dtype","TF_FLOAT","TF_INT32","TF_BOOL","TF_COMPLEX64","TF_STRING","Error","typeAttributeFromTensor","createOutputTensor","metadata","newId","set","shape","id","values","refCount","TF_INT64","console","warn","TF_RESOURCE","TF_UINT8","makeTensorFromDataId","getInputTensorIds","tensors","ids","i","Int64Scalar","valueArray","createTensor","info","get","dataId","createReductionOpAttrs","tensor","keepDims","name","type","TF_ATTR_BOOL","createTensorsTypeOpAttr","floatPrecision","epsilon","executeSingleInput","input","opAttrs","executeSingleOutput","inputs","outputMetadata","executeOp","executeMultipleOutputs","numOutputs","map","m","numDataIds","dispose","read","_a","readSync","has","tensorDataSync","disposeData","force","deleteTensor","delete","tensorData","incRef","move","getTFDType","write","applyActivation","activation","preluActivationWeights","leakyreluAlpha","relu","prelu","leakyRelu","elu","relu6","sigmoid","divide","a","backend_util","upcastType","divNoNan","where","condition","topKValues","x","k","topKIndices","int","decodeJpeg","contents","channels","ratio","fancyUpscaling","tryRecoverTruncated","acceptableFraction","dctMethod","TF_ATTR_INT","TF_ATTR_FLOAT","TF_ATTR_STRING","inputArgs","scalar","decodePng","decodeBmp","decodeGif","executeEncodeImageOp","imageData","imageShape","inputTensorId","outputTensorInfo","encodeJpeg","format","quality","progressive","optimizeSize","chromaDownsampling","densityUnit","xDensity","yDensity","xmpMetadata","encodePng","compression","deleteSavedModel","loadSavedModelMetaGraph","path","tags","loadSavedModel","getMappedInputTensorIds","inputTensorInfos","tensorIds","tfDtype","data","Uint8Array","from","dataSync","encodeInt32ArrayAsInt64","runSavedModel","outputOpNames","join","summaryWriter","logdir","writerResource","createSummaryFileWriter","resourceHandle","maxQueue","flushMillis","filenameSuffix","writeScalarSummary","tidy","util","assert","Number","isInteger","typeAttr","rank","TF_ATTR_TYPE","writeHistogramSummary","bucketCount","description","content","HistogramPluginData","setVersion","pluginData","SummaryMetadata","PluginData","setPluginName","setContent","serializeBinary","summary","setPluginData","setDisplayName","setSummaryDescription","summaryTensor","nameTensor","stepScalar","buckets","flushSummaryWriter","size","undefined","flatten","cast","min","max","range","sub","isSingular","equal","arraySync","center","bucketStart","bucketEnd","add","bucketCounts_1","concat","reshape","bucketWidth","div","offsets","bucketIndices","floorDiv","clampedIndices","minimum","oneHots","oneHot","bucketCounts","sum","edges","linspace","slice","leftEdges","rightEdges","stack","transpose","memory","unreliable","time","start","elapsed","process","hrtime","kernelMs","getNumOfSavedModels","KernelBackend","nodeBackend","findBackend","dataType","errorMessage","attrName","tensorsOrDtype","isNullOrUndefined","Tensor","isArray","getTFDTypeForInputs","createOpAttr","ensureTensorflowBackend","getBackend"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tf = require(\"@tensorflow/tfjs\");\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar util_1 = require(\"util\");\nvar int64_tensors_1 = require(\"./int64_tensors\");\n// tslint:disable-next-line:no-require-imports\nvar messages = require('./proto/api_pb');\nvar NodeJSKernelBackend = /** @class */ (function (_super) {\n    __extends(NodeJSKernelBackend, _super);\n    function NodeJSKernelBackend(binding, packageName) {\n        var _this = _super.call(this) || this;\n        _this.binding = binding;\n        _this.isGPUPackage = packageName === '@tensorflow/tfjs-node-gpu';\n        _this.isUsingGpuDevice = _this.binding.isUsingGpuDevice();\n        _this.tensorMap = new tf.DataStorage(_this, tf.engine());\n        return _this;\n    }\n    NodeJSKernelBackend.prototype.getDTypeInteger = function (dtype) {\n        switch (dtype) {\n            case 'float32':\n                return this.binding.TF_FLOAT;\n            case 'int32':\n                return this.binding.TF_INT32;\n            case 'bool':\n                return this.binding.TF_BOOL;\n            case 'complex64':\n                return this.binding.TF_COMPLEX64;\n            case 'string':\n                return this.binding.TF_STRING;\n            default:\n                throw new Error(\"Unsupported DType: \" + dtype);\n        }\n    };\n    NodeJSKernelBackend.prototype.typeAttributeFromTensor = function (value) {\n        return this.getDTypeInteger(value.dtype);\n    };\n    // Creates a new Tensor and maps the dataId to the passed in ID.\n    NodeJSKernelBackend.prototype.createOutputTensor = function (metadata) {\n        var newId = {};\n        this.tensorMap.set(newId, {\n            shape: metadata.shape,\n            dtype: metadata.dtype,\n            id: metadata.id,\n            values: null,\n            refCount: 1\n        });\n        var dtype;\n        switch (metadata.dtype) {\n            case this.binding.TF_FLOAT:\n                dtype = 'float32';\n                break;\n            case this.binding.TF_INT32:\n                dtype = 'int32';\n                break;\n            case this.binding.TF_INT64:\n                console.warn('INT64 output tensor will be stored as BigInt64Array.');\n                // INT64 is not supported in TFJS yet, cast it to int32.\n                dtype = 'int32';\n                break;\n            case this.binding.TF_BOOL:\n                dtype = 'bool';\n                break;\n            case this.binding.TF_COMPLEX64:\n                dtype = 'complex64';\n                break;\n            case this.binding.TF_STRING:\n                dtype = 'string';\n                break;\n            case this.binding.TF_RESOURCE:\n                // NOTE(cais): We currently represent resource-type Tensors\n                // as string of ubytes.\n                dtype = 'string';\n                break;\n            case this.binding.TF_UINT8:\n                // TensorFlow uses UINT8 as dtype for image tensor. UINT8 is not\n                // supported in TFJS yet, cast it to int32.\n                dtype = 'int32';\n                break;\n            default:\n                throw new Error(\"Unknown dtype enum \" + metadata.dtype);\n        }\n        // TODO(yassogba) Enable this once all the kernels are removed from backend.\n        // We can then change the return type from Tensor to TensorInfo.\n        // return {dataId: newId, shape: metadata.shape, dtype};\n        return tf.engine().makeTensorFromDataId(newId, metadata.shape, dtype);\n    };\n    // Prepares Tensor instances for Op execution.\n    NodeJSKernelBackend.prototype.getInputTensorIds = function (tensors) {\n        var ids = [];\n        for (var i = 0; i < tensors.length; i++) {\n            if (tensors[i] instanceof int64_tensors_1.Int64Scalar) {\n                // Then `tensors[i]` is a Int64Scalar, which we currently represent\n                // using an `Int32Array`.\n                var value = tensors[i].valueArray;\n                var id = this.binding.createTensor([], this.binding.TF_INT64, value);\n                ids.push(id);\n            }\n            else {\n                var info = this.tensorMap.get(tensors[i].dataId);\n                // TODO - what about ID in this case? Handle in write()??\n                if (info.values != null) {\n                    // Values were delayed to write into the TensorHandle. Do that before\n                    // Op execution and clear stored values.\n                    info.id =\n                        this.binding.createTensor(info.shape, info.dtype, info.values);\n                    info.values = null;\n                }\n                ids.push(info.id);\n            }\n        }\n        return ids;\n    };\n    NodeJSKernelBackend.prototype.createReductionOpAttrs = function (tensor, keepDims) {\n        if (keepDims === void 0) { keepDims = false; }\n        return [\n            { name: 'keep_dims', type: this.binding.TF_ATTR_BOOL, value: keepDims },\n            createTensorsTypeOpAttr('T', tensor.dtype),\n            createTensorsTypeOpAttr('Tidx', 'int32')\n        ];\n    };\n    NodeJSKernelBackend.prototype.floatPrecision = function () {\n        return 32;\n    };\n    NodeJSKernelBackend.prototype.epsilon = function () {\n        return _super.prototype.epsilon.call(this);\n    };\n    /**\n     * Executes an op that has a single input and output.\n     *\n     * Helper function to wrap executeSingleOutput in a particular case.\n     * @param name The name of the Op to execute.\n     * @param input The input Tensor for the Op.\n     */\n    NodeJSKernelBackend.prototype.executeSingleInput = function (name, input) {\n        var opAttrs = [createTensorsTypeOpAttr('T', input.dtype)];\n        return this.executeSingleOutput(name, opAttrs, [input]);\n    };\n    /**\n     * Executes a TensorFlow Eager Op that provides one output Tensor.\n     * @param name The name of the Op to execute.\n     * @param opAttrs The list of Op attributes required to execute.\n     * @param inputs The list of input Tensors for the Op.\n     * @return A resulting Tensor from Op execution.\n     */\n    NodeJSKernelBackend.prototype.executeSingleOutput = function (name, opAttrs, inputs) {\n        var outputMetadata = this.binding.executeOp(name, opAttrs, this.getInputTensorIds(inputs), 1);\n        return this.createOutputTensor(outputMetadata[0]);\n    };\n    /**\n     * Executes a TensorFlow Eager Op that provides multiple output Tensors.\n     * @param name The name of the Op to execute.\n     * @param opAttrs The list of Op attributes required to execute.\n     * @param inputs The list of input Tensors for the Op.\n     * @param numOutputs The number of output Tensors for Op execution.\n     * @return A resulting Tensor array from Op execution.\n     */\n    NodeJSKernelBackend.prototype.executeMultipleOutputs = function (name, opAttrs, inputs, numOutputs) {\n        var _this = this;\n        var outputMetadata = this.binding.executeOp(name, opAttrs, this.getInputTensorIds(inputs), numOutputs);\n        return outputMetadata.map(function (m) { return _this.createOutputTensor(m); });\n    };\n    NodeJSKernelBackend.prototype.numDataIds = function () {\n        return this.tensorMap.numDataIds();\n    };\n    NodeJSKernelBackend.prototype.dispose = function () { };\n    NodeJSKernelBackend.prototype.read = function (dataId) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.readSync(dataId)];\n            });\n        });\n    };\n    NodeJSKernelBackend.prototype.readSync = function (dataId) {\n        if (!this.tensorMap.has(dataId)) {\n            throw new Error(\"Tensor \" + dataId + \" was not registered!\");\n        }\n        var info = this.tensorMap.get(dataId);\n        if (info.values != null) {\n            return info.values;\n        }\n        else {\n            return this.binding.tensorDataSync(info.id);\n        }\n    };\n    /**\n     * Dispose the memory if the dataId has 0 refCount. Return true if the memory\n     * is released, false otherwise.\n     * @param dataId\n     * @oaram force Optional, remove the data regardless of refCount\n     */\n    NodeJSKernelBackend.prototype.disposeData = function (dataId, force) {\n        if (force === void 0) { force = false; }\n        // No-op if already disposed.\n        if (this.tensorMap.has(dataId)) {\n            var id = this.tensorMap.get(dataId).id;\n            this.tensorMap.get(dataId).refCount--;\n            if (!force && this.tensorMap.get(dataId).refCount > 0) {\n                return false;\n            }\n            if (id != null && id >= 0) {\n                this.binding.deleteTensor(id);\n            }\n            this.tensorMap.delete(dataId);\n        }\n        return true;\n    };\n    /** Return refCount of a `TensorData`. */\n    NodeJSKernelBackend.prototype.refCount = function (dataId) {\n        if (this.tensorMap.has(dataId)) {\n            var tensorData = this.tensorMap.get(dataId);\n            return tensorData.refCount;\n        }\n        return 0;\n    };\n    NodeJSKernelBackend.prototype.incRef = function (dataId) {\n        this.tensorMap.get(dataId).refCount++;\n    };\n    NodeJSKernelBackend.prototype.move = function (dataId, values, shape, dtype, refCount) {\n        this.tensorMap.set(dataId, { shape: shape, dtype: getTFDType(dtype), values: values, id: -1, refCount: refCount });\n    };\n    NodeJSKernelBackend.prototype.write = function (values, shape, dtype) {\n        var dataId = {};\n        this.move(dataId, values, shape, dtype, 1);\n        return dataId;\n    };\n    NodeJSKernelBackend.prototype.applyActivation = function (input, activation, preluActivationWeights, leakyreluAlpha) {\n        var result = input;\n        if (activation != null) {\n            if (activation === 'linear') {\n                // No-op\n            }\n            else if (activation === 'relu') {\n                result = tf.relu(result);\n            }\n            else if (activation === 'prelu') {\n                result = tf.prelu(result, preluActivationWeights);\n            }\n            else if (activation === 'leakyrelu') {\n                result = tf.leakyRelu(result, leakyreluAlpha);\n            }\n            else if (activation === 'elu') {\n                result = tf.elu(result);\n            }\n            else if (activation === 'relu6') {\n                result = tf.relu6(result);\n            }\n            else if (activation === 'sigmoid') {\n                result = tf.sigmoid(result);\n            }\n            else {\n                throw new Error(\"Activation: \" + activation + \" has not been implemented for the Node.js backend\");\n            }\n        }\n        return result;\n    };\n    NodeJSKernelBackend.prototype.divide = function (a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n        return this.executeSingleOutput('Div', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.divNoNan = function (a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n        return this.executeSingleOutput('DivNoNan', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.where = function (condition) {\n        return this.executeSingleOutput('Where', [], [condition]);\n    };\n    NodeJSKernelBackend.prototype.topKValues = function (x, k) {\n        throw new Error('Method not implemented.');\n    };\n    NodeJSKernelBackend.prototype.topKIndices = function (x, k) {\n        throw new Error('Method not implemented.');\n    };\n    NodeJSKernelBackend.prototype.int = function (x) {\n        throw new Error('Method not implemented.');\n    };\n    NodeJSKernelBackend.prototype.decodeJpeg = function (contents, channels, ratio, fancyUpscaling, tryRecoverTruncated, acceptableFraction, dctMethod) {\n        var opAttrs = [\n            { name: 'channels', type: this.binding.TF_ATTR_INT, value: channels },\n            { name: 'ratio', type: this.binding.TF_ATTR_INT, value: ratio }, {\n                name: 'fancy_upscaling',\n                type: this.binding.TF_ATTR_BOOL,\n                value: fancyUpscaling\n            },\n            {\n                name: 'try_recover_truncated',\n                type: this.binding.TF_ATTR_BOOL,\n                value: tryRecoverTruncated\n            },\n            {\n                name: 'acceptable_fraction',\n                type: this.binding.TF_ATTR_FLOAT,\n                value: acceptableFraction\n            },\n            { name: 'dct_method', type: this.binding.TF_ATTR_STRING, value: dctMethod }\n        ];\n        var inputArgs = [tfjs_1.scalar(contents, 'string')];\n        return this.executeSingleOutput('DecodeJpeg', opAttrs, inputArgs);\n    };\n    NodeJSKernelBackend.prototype.decodePng = function (contents, channels) {\n        var opAttrs = [{ name: 'channels', type: this.binding.TF_ATTR_INT, value: channels }];\n        var inputArgs = [tfjs_1.scalar(contents, 'string')];\n        return this.executeSingleOutput('DecodePng', opAttrs, inputArgs);\n    };\n    NodeJSKernelBackend.prototype.decodeBmp = function (contents, channels) {\n        var opAttrs = [{ name: 'channels', type: this.binding.TF_ATTR_INT, value: channels }];\n        var inputArgs = [tfjs_1.scalar(contents, 'string')];\n        return this.executeSingleOutput('DecodeBmp', opAttrs, inputArgs);\n    };\n    NodeJSKernelBackend.prototype.decodeGif = function (contents) {\n        var inputArgs = [tfjs_1.scalar(contents, 'string')];\n        return this.executeSingleOutput('DecodeGif', [], inputArgs);\n    };\n    NodeJSKernelBackend.prototype.executeEncodeImageOp = function (name, opAttrs, imageData, imageShape) {\n        var inputTensorId = this.binding.createTensor(imageShape, this.binding.TF_UINT8, imageData);\n        var outputMetadata = this.binding.executeOp(name, opAttrs, [inputTensorId], 1);\n        var outputTensorInfo = outputMetadata[0];\n        // prevent the tensor data from being converted to a UTF8 string, since\n        // the encoded data is not valid UTF8\n        outputTensorInfo.dtype = this.binding.TF_UINT8;\n        return this.createOutputTensor(outputTensorInfo);\n    };\n    NodeJSKernelBackend.prototype.encodeJpeg = function (imageData, imageShape, format, quality, progressive, optimizeSize, chromaDownsampling, densityUnit, xDensity, yDensity, xmpMetadata) {\n        var opAttrs = [\n            { name: 'format', type: this.binding.TF_ATTR_STRING, value: format },\n            { name: 'quality', type: this.binding.TF_ATTR_INT, value: quality }, {\n                name: 'progressive',\n                type: this.binding.TF_ATTR_BOOL,\n                value: progressive\n            },\n            {\n                name: 'optimize_size',\n                type: this.binding.TF_ATTR_BOOL,\n                value: optimizeSize\n            },\n            {\n                name: 'chroma_downsampling',\n                type: this.binding.TF_ATTR_BOOL,\n                value: chromaDownsampling\n            },\n            {\n                name: 'density_unit',\n                type: this.binding.TF_ATTR_STRING,\n                value: densityUnit\n            },\n            { name: 'x_density', type: this.binding.TF_ATTR_INT, value: xDensity },\n            { name: 'y_density', type: this.binding.TF_ATTR_INT, value: yDensity }, {\n                name: 'xmp_metadata',\n                type: this.binding.TF_ATTR_STRING,\n                value: xmpMetadata\n            }\n        ];\n        return this.executeEncodeImageOp('EncodeJpeg', opAttrs, imageData, imageShape);\n    };\n    NodeJSKernelBackend.prototype.encodePng = function (imageData, imageShape, compression) {\n        var opAttrs = [\n            { name: 'compression', type: this.binding.TF_ATTR_INT, value: compression }\n        ];\n        return this.executeEncodeImageOp('EncodePng', opAttrs, imageData, imageShape);\n    };\n    NodeJSKernelBackend.prototype.deleteSavedModel = function (id) {\n        this.binding.deleteSavedModel(id);\n    };\n    NodeJSKernelBackend.prototype.loadSavedModelMetaGraph = function (path, tags) {\n        return this.binding.loadSavedModel(path, tags);\n    };\n    NodeJSKernelBackend.prototype.getMappedInputTensorIds = function (inputs, inputTensorInfos) {\n        var tensorIds = this.getInputTensorIds(inputs);\n        for (var i = 0; i < inputs.length; i++) {\n            if (inputTensorInfos[i] != null) {\n                if (inputTensorInfos[i].tfDtype === 'DT_UINT8') {\n                    var data = Uint8Array.from(inputs[i].dataSync());\n                    var inputTensorId = this.binding.createTensor(inputs[i].shape, this.binding.TF_UINT8, data);\n                    tensorIds[i] = inputTensorId;\n                }\n                else if (inputTensorInfos[i].tfDtype === 'DT_INT64') {\n                    var data = int64_tensors_1.encodeInt32ArrayAsInt64(inputs[i].dataSync());\n                    var inputTensorId = this.binding.createTensor(inputs[i].shape, this.binding.TF_INT64, data);\n                    tensorIds[i] = inputTensorId;\n                }\n            }\n        }\n        return tensorIds;\n    };\n    NodeJSKernelBackend.prototype.runSavedModel = function (id, inputs, inputTensorInfos, outputOpNames) {\n        var _this = this;\n        var outputMetadata = this.binding.runSavedModel(id, this.getMappedInputTensorIds(inputs, inputTensorInfos), inputTensorInfos.map(function (info) { return info.name; }).join(','), outputOpNames.join(','));\n        return outputMetadata.map(function (m) { return _this.createOutputTensor(m); });\n    };\n    // ------------------------------------------------------------\n    // TensorBoard-related (tfjs-node-specific) backend kernels.\n    NodeJSKernelBackend.prototype.summaryWriter = function (logdir) {\n        var opAttrs = [\n            {\n                name: 'shared_name',\n                type: this.binding.TF_ATTR_STRING,\n                value: \"logdir:\" + logdir\n            },\n            { name: 'container', type: this.binding.TF_ATTR_STRING, value: '' }\n        ];\n        var writerResource = this.executeSingleOutput('SummaryWriter', opAttrs, []);\n        return writerResource;\n    };\n    NodeJSKernelBackend.prototype.createSummaryFileWriter = function (resourceHandle, logdir, maxQueue, flushMillis, filenameSuffix) {\n        var inputArgs = [\n            resourceHandle, tfjs_1.scalar(logdir),\n            tfjs_1.scalar(maxQueue == null ? 10 : maxQueue, 'int32'),\n            tfjs_1.scalar(flushMillis == null ? 2 * 60 * 1000 : flushMillis, 'int32'),\n            tfjs_1.scalar(filenameSuffix == null ? '.v2' : filenameSuffix)\n        ];\n        this.executeMultipleOutputs('CreateSummaryFileWriter', [], inputArgs, 0);\n    };\n    NodeJSKernelBackend.prototype.writeScalarSummary = function (resourceHandle, step, name, value) {\n        var _this = this;\n        tfjs_1.tidy(function () {\n            tfjs_1.util.assert(Number.isInteger(step), function () { return \"step is expected to be an integer, but is instead \" + step; });\n            var inputArgs = [resourceHandle, new int64_tensors_1.Int64Scalar(step), tfjs_1.scalar(name, 'string')];\n            var typeAttr;\n            if (typeof value === 'number') {\n                inputArgs.push(tfjs_1.scalar(value));\n                typeAttr = _this.binding.TF_FLOAT;\n            }\n            else {\n                // `value` is a Scalar.\n                tfjs_1.util.assert(value.rank === 0, function () { return \"A non-scalar tensor (rank \" + value.rank + \") is passed to \" +\n                    \"writeScalarSummary()\"; });\n                inputArgs.push(value);\n                typeAttr = _this.typeAttributeFromTensor(value);\n            }\n            var opAttrs = [{ name: 'T', type: _this.binding.TF_ATTR_TYPE, value: typeAttr }];\n            _this.binding.executeOp('WriteScalarSummary', opAttrs, _this.getInputTensorIds(inputArgs), 0);\n        });\n    };\n    NodeJSKernelBackend.prototype.writeHistogramSummary = function (resourceHandle, step, name, data, bucketCount, description) {\n        var _this = this;\n        tfjs_1.tidy(function () {\n            tfjs_1.util.assert(Number.isInteger(step), function () { return \"step is expected to be an integer, but is instead \" + step; });\n            // We use the WriteSummary op, and not WriteHistogramSummary. The\n            // difference is that WriteHistogramSummary takes a tensor of any shape,\n            // and places the values in 30 buckets, while WriteSummary expects a\n            // tensor which already describes the bucket widths and counts.\n            //\n            // If we were to use WriteHistogramSummary, we wouldn't have to implement\n            // the \"bucketization\" of the input tensor, but we also wouldn't have\n            // control over the number of buckets, or the description of the graph.\n            //\n            // Therefore, we instead use WriteSummary, which makes it possible to\n            // support these features. However, the trade-off is that we have to\n            // implement our own \"bucketization\", and have to write the summary as a\n            // protobuf message.\n            var content = new messages.HistogramPluginData().setVersion(0);\n            var pluginData = new messages.SummaryMetadata.PluginData()\n                .setPluginName('histograms')\n                .setContent(content.serializeBinary());\n            var summary = new messages.SummaryMetadata()\n                .setPluginData(pluginData)\n                .setDisplayName(null)\n                .setSummaryDescription(description);\n            var summaryTensor = tfjs_1.scalar(summary.serializeBinary(), 'string');\n            var nameTensor = tfjs_1.scalar(name, 'string');\n            var stepScalar = new int64_tensors_1.Int64Scalar(step);\n            var buckets = _this.buckets(data, bucketCount);\n            tfjs_1.util.assert(buckets.rank === 2 && buckets.shape[1] === 3, function () { return \"Expected buckets to have shape [k, 3], but they had shape \" + buckets.shape; });\n            tfjs_1.util.assert(buckets.dtype === 'float32', function () { return \"Expected buckets to have dtype float32, but they had dtype \" + buckets.dtype; });\n            var inputArgs = [resourceHandle, stepScalar, buckets, nameTensor, summaryTensor];\n            var typeAttr = _this.typeAttributeFromTensor(buckets);\n            var opAttrs = [{ name: 'T', type: _this.binding.TF_ATTR_TYPE, value: typeAttr }];\n            _this.binding.executeOp('WriteSummary', opAttrs, _this.getInputTensorIds(inputArgs), 0);\n        });\n    };\n    NodeJSKernelBackend.prototype.flushSummaryWriter = function (resourceHandle) {\n        var inputArgs = [resourceHandle];\n        this.executeMultipleOutputs('FlushSummaryWriter', [], inputArgs, 0);\n    };\n    /**\n     * Group data into histogram buckets.\n     *\n     * @param data A `Tensor` of any shape. Must be castable to `float32`\n     * @param bucketCount Optional positive `number`\n     * @returns A `Tensor` of shape `[k, 3]` and type `float32`. The `i`th row is\n     *   a triple `[leftEdge, rightEdge, count]` for a single bucket. The value of\n     *   `k` is either `bucketCount`, `1` or `0`.\n     */\n    NodeJSKernelBackend.prototype.buckets = function (data, bucketCount) {\n        if (data.size === 0) {\n            return tf.tensor([], [0, 3], 'float32');\n        }\n        // 30 is the default number of buckets in the TensorFlow Python\n        // implementation. See\n        // https://github.com/tensorflow/tensorboard/blob/master/tensorboard/plugins/histogram/summary_v2.py\n        bucketCount = bucketCount !== undefined ? bucketCount : 30;\n        tfjs_1.util.assert(Number.isInteger(bucketCount) && bucketCount > 0, function () {\n            return \"Expected bucket count to be a strictly positive integer, but it was \" +\n                (\"\" + bucketCount);\n        });\n        data = data.flatten();\n        data = data.cast('float32');\n        var min = data.min();\n        var max = data.max();\n        var range = max.sub(min);\n        var isSingular = range.equal(0).arraySync() !== 0;\n        if (isSingular) {\n            var center = min;\n            var bucketStart = center.sub(0.5);\n            var bucketEnd = center.add(0.5);\n            var bucketCounts_1 = tf.scalar(data.size, 'float32');\n            return tf.concat([bucketStart, bucketEnd, bucketCounts_1]).reshape([1, 3]);\n        }\n        var bucketWidth = range.div(bucketCount);\n        var offsets = data.sub(min);\n        var bucketIndices = offsets.floorDiv(bucketWidth).cast('int32');\n        var clampedIndices = tf.minimum(bucketIndices, bucketCount - 1).cast('int32');\n        var oneHots = tf.oneHot(clampedIndices, bucketCount);\n        var bucketCounts = oneHots.sum(0).cast('int32');\n        var edges = tf.linspace(min.arraySync(), max.arraySync(), bucketCount + 1);\n        // Ensure last value in edges is max (TF's linspace op doesn't do this)\n        edges = tf.concat([edges.slice(0, bucketCount), max.reshape([1])], 0);\n        var leftEdges = edges.slice(0, bucketCount);\n        var rightEdges = edges.slice(1, bucketCount);\n        return tf.stack([leftEdges, rightEdges, bucketCounts.cast('float32')])\n            .transpose();\n    };\n    // ~ TensorBoard-related (tfjs-node-specific) backend kernels.\n    // ------------------------------------------------------------\n    NodeJSKernelBackend.prototype.memory = function () {\n        // Due to automatic garbage collection, the numbers are unreliable.\n        // TODO(kreeger): Since there is finalization in C, count the true\n        // number of undisposed tensors.\n        return { unreliable: true };\n    };\n    NodeJSKernelBackend.prototype.time = function (f) {\n        return __awaiter(this, void 0, void 0, function () {\n            var start, elapsed;\n            return __generator(this, function (_a) {\n                start = process.hrtime();\n                f();\n                elapsed = process.hrtime(start);\n                return [2 /*return*/, { kernelMs: elapsed[0] * 1000 + elapsed[1] / 1000000 }];\n            });\n        });\n    };\n    NodeJSKernelBackend.prototype.getNumOfSavedModels = function () {\n        return this.binding.getNumOfSavedModels();\n    };\n    return NodeJSKernelBackend;\n}(tfjs_1.KernelBackend));\nexports.NodeJSKernelBackend = NodeJSKernelBackend;\n/** Returns an instance of the Node.js backend. */\nfunction nodeBackend() {\n    return tf.findBackend('tensorflow');\n}\nexports.nodeBackend = nodeBackend;\n/** Returns the TF dtype for a given DataType. */\nfunction getTFDType(dataType) {\n    var binding = nodeBackend().binding;\n    switch (dataType) {\n        case 'float32':\n            return binding.TF_FLOAT;\n        case 'int32':\n            return binding.TF_INT32;\n        case 'bool':\n            return binding.TF_BOOL;\n        case 'complex64':\n            return binding.TF_COMPLEX64;\n        case 'string':\n            return binding.TF_STRING;\n        // tslint:disable-next-line:no-any\n        case 'int64':\n            // int64 is not a generally supported dtype in TensorFlow.js\n            // (tfjs-core). However, it needs to be included here for the purpose of\n            // writing the `step` value to TensorBoard via WriteScalarSummary and\n            // other op kernels.\n            return binding.TF_INT64;\n        default:\n            var errorMessage = \"Unknown dtype: \" + dataType;\n            throw new Error(errorMessage);\n    }\n}\nexports.getTFDType = getTFDType;\n/**\n * Creates a TFEOpAttr for a 'type' OpDef attribute from a Tensor or list of\n * Tensors.\n */\nfunction createTensorsTypeOpAttr(attrName, tensorsOrDtype) {\n    if (util_1.isNullOrUndefined(tensorsOrDtype)) {\n        throw new Error('Invalid input tensors value.');\n    }\n    return {\n        name: attrName,\n        type: nodeBackend().binding.TF_ATTR_TYPE,\n        value: (tensorsOrDtype instanceof tf.Tensor || Array.isArray(tensorsOrDtype)) ?\n            getTFDTypeForInputs(tensorsOrDtype) :\n            getTFDType(tensorsOrDtype)\n    };\n}\nexports.createTensorsTypeOpAttr = createTensorsTypeOpAttr;\n// TODO(yassogba) remove? who uses this?\nfunction createOpAttr(attrName, tensorsOrDtype, value) {\n    if (util_1.isNullOrUndefined(tensorsOrDtype)) {\n        throw new Error('Invalid input tensors value.');\n    }\n    return { name: attrName, type: nodeBackend().binding.TF_BOOL, value: value };\n}\nexports.createOpAttr = createOpAttr;\n/** Returns the dtype number for a single or list of input Tensors. */\nfunction getTFDTypeForInputs(tensors) {\n    if (util_1.isNullOrUndefined(tensors)) {\n        throw new Error('Invalid input tensors value.');\n    }\n    if (util_1.isArray(tensors)) {\n        for (var i = 0; i < tensors.length; i++) {\n            return getTFDType(tensors[i].dtype);\n        }\n        return -1;\n    }\n    else {\n        return getTFDType(tensors.dtype);\n    }\n}\nfunction ensureTensorflowBackend() {\n    tf.util.assert(tf.getBackend() === 'tensorflow', function () { return \"Expect the current backend to be \\\"tensorflow\\\", but got \\\"\" + tf.getBackend() + \"\\\"\"; });\n}\nexports.ensureTensorflowBackend = ensureTensorflowBackend;\n"]},"metadata":{},"sourceType":"script"}