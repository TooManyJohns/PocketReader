{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\n\nexports.depthwiseConv2dNativeBackpropInputConfig = {\n  kernelName: tfjs_1.DepthwiseConv2dNativeBackpropInput,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var _a = args.inputs,\n        dy = _a.dy,\n        filter = _a.filter;\n    var backend = args.backend;\n    var _b = args.attrs,\n        strides = _b.strides,\n        dilations = _b.dilations,\n        pad = _b.pad,\n        dimRoundingMode = _b.dimRoundingMode,\n        inputShape = _b.inputShape;\n    var convInfo = tfjs_1.backend_util.computeConv2DInfo(inputShape, filter.shape, strides, dilations, pad, dimRoundingMode, true\n    /* depthwise */\n    );\n    return depthwiseConv2dNativeBackpropInputImpl(dy, filter, convInfo, backend);\n  }\n};\n\nfunction depthwiseConv2dNativeBackpropInputImpl(dy, filter, convInfo, backend) {\n  var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n  var padding = convInfo.padInfo.type;\n  var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n  var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n  var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', 'float32'), {\n    name: 'strides',\n    type: backend.binding.TF_ATTR_INT,\n    value: strides\n  }, {\n    name: 'padding',\n    type: backend.binding.TF_ATTR_STRING,\n    value: padding\n  }, {\n    name: 'data_format',\n    type: backend.binding.TF_ATTR_STRING,\n    value: dataFormat\n  }, {\n    name: 'dilations',\n    type: backend.binding.TF_ATTR_INT,\n    value: dilations\n  }];\n  var inputSizes = tfjs_1.tensor1d(convInfo.inShape, 'int32');\n  var res = backend.executeSingleOutput(tfjs_1.DepthwiseConv2dNativeBackpropInput, opAttrs, [inputSizes, filter, dy]);\n  inputSizes.dispose();\n  return res;\n}","map":{"version":3,"sources":["/Users/johnlutz/Github/PocketReader/PocketReader/src/main/webapp/ui/node_modules/@tensorflow/tfjs-node/dist/kernels/DepthwiseConv2dNativeBackpropInput.js"],"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","depthwiseConv2dNativeBackpropInputConfig","kernelName","DepthwiseConv2dNativeBackpropInput","backendName","kernelFunc","args","_a","inputs","dy","filter","backend","_b","attrs","strides","dilations","pad","dimRoundingMode","inputShape","convInfo","backend_util","computeConv2DInfo","shape","depthwiseConv2dNativeBackpropInputImpl","strideHeight","strideWidth","padding","padInfo","type","dataFormat","dilationHeight","dilationWidth","opAttrs","createTensorsTypeOpAttr","name","binding","TF_ATTR_INT","TF_ATTR_STRING","inputSizes","tensor1d","inShape","res","executeSingleOutput","dispose"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.depthwiseConv2dNativeBackpropInputConfig = {\n    kernelName: tfjs_1.DepthwiseConv2dNativeBackpropInput,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var _a = args.inputs, dy = _a.dy, filter = _a.filter;\n        var backend = args.backend;\n        var _b = args.attrs, strides = _b.strides, dilations = _b.dilations, pad = _b.pad, dimRoundingMode = _b.dimRoundingMode, inputShape = _b.inputShape;\n        var convInfo = tfjs_1.backend_util.computeConv2DInfo(inputShape, filter.shape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);\n        return depthwiseConv2dNativeBackpropInputImpl(dy, filter, convInfo, backend);\n    }\n};\nfunction depthwiseConv2dNativeBackpropInputImpl(dy, filter, convInfo, backend) {\n    var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n    var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n    var opAttrs = [\n        nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', 'float32'),\n        { name: 'strides', type: backend.binding.TF_ATTR_INT, value: strides },\n        { name: 'padding', type: backend.binding.TF_ATTR_STRING, value: padding }, {\n            name: 'data_format',\n            type: backend.binding.TF_ATTR_STRING,\n            value: dataFormat\n        },\n        { name: 'dilations', type: backend.binding.TF_ATTR_INT, value: dilations }\n    ];\n    var inputSizes = tfjs_1.tensor1d(convInfo.inShape, 'int32');\n    var res = backend.executeSingleOutput(tfjs_1.DepthwiseConv2dNativeBackpropInput, opAttrs, [inputSizes, filter, dy]);\n    inputSizes.dispose();\n    return res;\n}\n"]},"metadata":{},"sourceType":"script"}