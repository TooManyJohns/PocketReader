{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\n\nexports.stridedSliceConfig = {\n  kernelName: tfjs_1.StridedSlice,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var x = args.inputs.x;\n    var backend = args.backend;\n    var _a = args.attrs,\n        beginMask = _a.beginMask,\n        endMask = _a.endMask,\n        ellipsisMask = _a.ellipsisMask,\n        newAxisMask = _a.newAxisMask,\n        shrinkAxisMask = _a.shrinkAxisMask;\n    var attrs = args.attrs; // make a copy because it may be modified in-place further down.\n\n    var begin = attrs.begin.slice();\n    var end = attrs.end.slice();\n    var strides = attrs.strides;\n    return tfjs_1.tidy(function () {\n      var beginTensor = tfjs_1.tensor1d(begin, 'int32');\n      var endTensor = tfjs_1.tensor1d(end, 'int32');\n      var stridesTensor = tfjs_1.tensor1d(strides, 'int32');\n      var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype), nodejs_kernel_backend_1.createTensorsTypeOpAttr('Index', 'int32'), {\n        name: 'begin_mask',\n        type: backend.binding.TF_ATTR_INT,\n        value: beginMask\n      }, {\n        name: 'end_mask',\n        type: backend.binding.TF_ATTR_INT,\n        value: endMask\n      }, {\n        name: 'ellipsis_mask',\n        type: backend.binding.TF_ATTR_INT,\n        value: ellipsisMask\n      }, {\n        name: 'new_axis_mask',\n        type: backend.binding.TF_ATTR_INT,\n        value: newAxisMask\n      }, {\n        name: 'shrink_axis_mask',\n        type: backend.binding.TF_ATTR_INT,\n        value: shrinkAxisMask\n      }];\n      return backend.executeSingleOutput(tfjs_1.StridedSlice, opAttrs, [x, beginTensor, endTensor, stridesTensor]);\n    });\n  }\n};","map":{"version":3,"sources":["/Users/johnlutz/Github/PocketReader/PocketReader/src/main/webapp/ui/node_modules/@tensorflow/tfjs-node/dist/kernels/StridedSlice.js"],"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","stridedSliceConfig","kernelName","StridedSlice","backendName","kernelFunc","args","x","inputs","backend","_a","attrs","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","begin","slice","end","strides","tidy","beginTensor","tensor1d","endTensor","stridesTensor","opAttrs","createTensorsTypeOpAttr","dtype","name","type","binding","TF_ATTR_INT","executeSingleOutput"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.stridedSliceConfig = {\n    kernelName: tfjs_1.StridedSlice,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var x = args.inputs.x;\n        var backend = args.backend;\n        var _a = args.attrs, beginMask = _a.beginMask, endMask = _a.endMask, ellipsisMask = _a.ellipsisMask, newAxisMask = _a.newAxisMask, shrinkAxisMask = _a.shrinkAxisMask;\n        var attrs = args.attrs;\n        // make a copy because it may be modified in-place further down.\n        var begin = attrs.begin.slice();\n        var end = attrs.end.slice();\n        var strides = attrs.strides;\n        return tfjs_1.tidy(function () {\n            var beginTensor = tfjs_1.tensor1d(begin, 'int32');\n            var endTensor = tfjs_1.tensor1d(end, 'int32');\n            var stridesTensor = tfjs_1.tensor1d(strides, 'int32');\n            var opAttrs = [\n                nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype),\n                nodejs_kernel_backend_1.createTensorsTypeOpAttr('Index', 'int32'), {\n                    name: 'begin_mask',\n                    type: backend.binding.TF_ATTR_INT,\n                    value: beginMask\n                },\n                { name: 'end_mask', type: backend.binding.TF_ATTR_INT, value: endMask }, {\n                    name: 'ellipsis_mask',\n                    type: backend.binding.TF_ATTR_INT,\n                    value: ellipsisMask\n                },\n                {\n                    name: 'new_axis_mask',\n                    type: backend.binding.TF_ATTR_INT,\n                    value: newAxisMask\n                },\n                {\n                    name: 'shrink_axis_mask',\n                    type: backend.binding.TF_ATTR_INT,\n                    value: shrinkAxisMask\n                }\n            ];\n            return backend.executeSingleOutput(tfjs_1.StridedSlice, opAttrs, [x, beginTensor, endTensor, stridesTensor]);\n        });\n    }\n};\n"]},"metadata":{},"sourceType":"script"}