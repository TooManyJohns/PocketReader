{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\n\nexports.gatherV2Config = {\n  kernelName: tfjs_1.GatherV2,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var _a = args.inputs,\n        x = _a.x,\n        indices = _a.indices;\n    var backend = args.backend;\n    var _b = args.attrs,\n        axis = _b.axis,\n        batchDims = _b.batchDims; // Throw error when any index is out of bound.\n\n    var indicesVals = backend.readSync(indices.dataId);\n    var axisDim = x.shape[axis];\n\n    var _loop_1 = function (i) {\n      var index = indicesVals[i];\n      tfjs_1.util.assert(index <= axisDim - 1 && index >= 0, function () {\n        return \"GatherV2: the index value \" + index + \" is not in [0, \" + (axisDim - 1) + \"]\";\n      });\n    };\n\n    for (var i = 0; i < indicesVals.length; ++i) {\n      _loop_1(i);\n    } // validate the inputs\n\n\n    tfjs_1.backend_util.segment_util.collectGatherOpShapeInfo(x, indices, axis, batchDims);\n    var axisTensor = tfjs_1.scalar(axis, 'int32');\n    var opAttrs = [{\n      name: 'batch_dims',\n      type: backend.binding.TF_ATTR_INT,\n      value: batchDims\n    }, nodejs_kernel_backend_1.createTensorsTypeOpAttr('Tparams', x.dtype), nodejs_kernel_backend_1.createTensorsTypeOpAttr('Tindices', indices.dtype), nodejs_kernel_backend_1.createTensorsTypeOpAttr('Taxis', 'int32')];\n    var res = backend.executeSingleOutput(tfjs_1.GatherV2, opAttrs, [x, indices, axisTensor]);\n    axisTensor.dispose();\n    return res;\n  }\n};","map":{"version":3,"sources":["/Users/johnlutz/Github/PocketReader/PocketReader/src/main/webapp/ui/node_modules/@tensorflow/tfjs-node/dist/kernels/GatherV2.js"],"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","gatherV2Config","kernelName","GatherV2","backendName","kernelFunc","args","_a","inputs","x","indices","backend","_b","attrs","axis","batchDims","indicesVals","readSync","dataId","axisDim","shape","_loop_1","i","index","util","assert","length","backend_util","segment_util","collectGatherOpShapeInfo","axisTensor","scalar","opAttrs","name","type","binding","TF_ATTR_INT","createTensorsTypeOpAttr","dtype","res","executeSingleOutput","dispose"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,0BAAD,CAArC;;AACAH,OAAO,CAACK,cAAR,GAAyB;AACrBC,EAAAA,UAAU,EAAEJ,MAAM,CAACK,QADE;AAErBC,EAAAA,WAAW,EAAE,YAFQ;AAGrBC,EAAAA,UAAU,EAAE,UAAUC,IAAV,EAAgB;AACxB,QAAIC,EAAE,GAAGD,IAAI,CAACE,MAAd;AAAA,QAAsBC,CAAC,GAAGF,EAAE,CAACE,CAA7B;AAAA,QAAgCC,OAAO,GAAGH,EAAE,CAACG,OAA7C;AACA,QAAIC,OAAO,GAAGL,IAAI,CAACK,OAAnB;AACA,QAAIC,EAAE,GAAGN,IAAI,CAACO,KAAd;AAAA,QAAqBC,IAAI,GAAGF,EAAE,CAACE,IAA/B;AAAA,QAAqCC,SAAS,GAAGH,EAAE,CAACG,SAApD,CAHwB,CAIxB;;AACA,QAAIC,WAAW,GAAGL,OAAO,CAACM,QAAR,CAAiBP,OAAO,CAACQ,MAAzB,CAAlB;AACA,QAAIC,OAAO,GAAGV,CAAC,CAACW,KAAF,CAAQN,IAAR,CAAd;;AACA,QAAIO,OAAO,GAAG,UAAUC,CAAV,EAAa;AACvB,UAAIC,KAAK,GAAGP,WAAW,CAACM,CAAD,CAAvB;AACAxB,MAAAA,MAAM,CAAC0B,IAAP,CAAYC,MAAZ,CAAmBF,KAAK,IAAIJ,OAAO,GAAG,CAAnB,IAAwBI,KAAK,IAAI,CAApD,EAAuD,YAAY;AAAE,eAAO,+BAA+BA,KAA/B,GAAuC,iBAAvC,IAA4DJ,OAAO,GAAG,CAAtE,IAA2E,GAAlF;AAAwF,OAA7J;AACH,KAHD;;AAIA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,WAAW,CAACU,MAAhC,EAAwC,EAAEJ,CAA1C,EAA6C;AACzCD,MAAAA,OAAO,CAACC,CAAD,CAAP;AACH,KAbuB,CAcxB;;;AACAxB,IAAAA,MAAM,CAAC6B,YAAP,CAAoBC,YAApB,CAAiCC,wBAAjC,CAA0DpB,CAA1D,EAA6DC,OAA7D,EAAsEI,IAAtE,EAA4EC,SAA5E;AACA,QAAIe,UAAU,GAAGhC,MAAM,CAACiC,MAAP,CAAcjB,IAAd,EAAoB,OAApB,CAAjB;AACA,QAAIkB,OAAO,GAAG,CACV;AAAEC,MAAAA,IAAI,EAAE,YAAR;AAAsBC,MAAAA,IAAI,EAAEvB,OAAO,CAACwB,OAAR,CAAgBC,WAA5C;AAAyDvC,MAAAA,KAAK,EAAEkB;AAAhE,KADU,EAEVf,uBAAuB,CAACqC,uBAAxB,CAAgD,SAAhD,EAA2D5B,CAAC,CAAC6B,KAA7D,CAFU,EAGVtC,uBAAuB,CAACqC,uBAAxB,CAAgD,UAAhD,EAA4D3B,OAAO,CAAC4B,KAApE,CAHU,EAIVtC,uBAAuB,CAACqC,uBAAxB,CAAgD,OAAhD,EAAyD,OAAzD,CAJU,CAAd;AAMA,QAAIE,GAAG,GAAG5B,OAAO,CAAC6B,mBAAR,CAA4B1C,MAAM,CAACK,QAAnC,EAA6C6B,OAA7C,EAAsD,CAACvB,CAAD,EAAIC,OAAJ,EAAaoB,UAAb,CAAtD,CAAV;AACAA,IAAAA,UAAU,CAACW,OAAX;AACA,WAAOF,GAAP;AACH;AA7BoB,CAAzB","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.gatherV2Config = {\n    kernelName: tfjs_1.GatherV2,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var _a = args.inputs, x = _a.x, indices = _a.indices;\n        var backend = args.backend;\n        var _b = args.attrs, axis = _b.axis, batchDims = _b.batchDims;\n        // Throw error when any index is out of bound.\n        var indicesVals = backend.readSync(indices.dataId);\n        var axisDim = x.shape[axis];\n        var _loop_1 = function (i) {\n            var index = indicesVals[i];\n            tfjs_1.util.assert(index <= axisDim - 1 && index >= 0, function () { return \"GatherV2: the index value \" + index + \" is not in [0, \" + (axisDim - 1) + \"]\"; });\n        };\n        for (var i = 0; i < indicesVals.length; ++i) {\n            _loop_1(i);\n        }\n        // validate the inputs\n        tfjs_1.backend_util.segment_util.collectGatherOpShapeInfo(x, indices, axis, batchDims);\n        var axisTensor = tfjs_1.scalar(axis, 'int32');\n        var opAttrs = [\n            { name: 'batch_dims', type: backend.binding.TF_ATTR_INT, value: batchDims },\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('Tparams', x.dtype),\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('Tindices', indices.dtype),\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('Taxis', 'int32')\n        ];\n        var res = backend.executeSingleOutput(tfjs_1.GatherV2, opAttrs, [x, indices, axisTensor]);\n        axisTensor.dispose();\n        return res;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}