{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\n\nexports.powConfig = {\n  kernelName: tfjs_1.Pow,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var _a = args.inputs,\n        a = _a.a,\n        b = _a.b;\n    var backend = args.backend;\n    var dtype = tfjs_1.backend_util.upcastType(a.dtype, b.dtype);\n    var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', dtype)];\n    return tfjs_1.tidy(function () {\n      return backend.executeSingleOutput(tfjs_1.Pow, opAttrs, [tfjs_1.cast(a, dtype), tfjs_1.cast(b, dtype)]);\n    });\n  }\n};","map":{"version":3,"sources":["/Users/johnlutz/Github/PocketReader/PocketReader/src/main/webapp/ui/node_modules/@tensorflow/tfjs-node/dist/kernels/Pow.js"],"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","powConfig","kernelName","Pow","backendName","kernelFunc","args","_a","inputs","a","b","backend","dtype","backend_util","upcastType","opAttrs","createTensorsTypeOpAttr","tidy","executeSingleOutput","cast"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,0BAAD,CAArC;;AACAH,OAAO,CAACK,SAAR,GAAoB;AAChBC,EAAAA,UAAU,EAAEJ,MAAM,CAACK,GADH;AAEhBC,EAAAA,WAAW,EAAE,YAFG;AAGhBC,EAAAA,UAAU,EAAE,UAAUC,IAAV,EAAgB;AACxB,QAAIC,EAAE,GAAGD,IAAI,CAACE,MAAd;AAAA,QAAsBC,CAAC,GAAGF,EAAE,CAACE,CAA7B;AAAA,QAAgCC,CAAC,GAAGH,EAAE,CAACG,CAAvC;AACA,QAAIC,OAAO,GAAGL,IAAI,CAACK,OAAnB;AACA,QAAIC,KAAK,GAAGd,MAAM,CAACe,YAAP,CAAoBC,UAApB,CAA+BL,CAAC,CAACG,KAAjC,EAAwCF,CAAC,CAACE,KAA1C,CAAZ;AACA,QAAIG,OAAO,GAAG,CAACf,uBAAuB,CAACgB,uBAAxB,CAAgD,GAAhD,EAAqDJ,KAArD,CAAD,CAAd;AACA,WAAOd,MAAM,CAACmB,IAAP,CAAY,YAAY;AAC3B,aAAON,OAAO,CAACO,mBAAR,CAA4BpB,MAAM,CAACK,GAAnC,EAAwCY,OAAxC,EAAiD,CAACjB,MAAM,CAACqB,IAAP,CAAYV,CAAZ,EAAeG,KAAf,CAAD,EAAwBd,MAAM,CAACqB,IAAP,CAAYT,CAAZ,EAAeE,KAAf,CAAxB,CAAjD,CAAP;AACH,KAFM,CAAP;AAGH;AAXe,CAApB","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.powConfig = {\n    kernelName: tfjs_1.Pow,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var _a = args.inputs, a = _a.a, b = _a.b;\n        var backend = args.backend;\n        var dtype = tfjs_1.backend_util.upcastType(a.dtype, b.dtype);\n        var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', dtype)];\n        return tfjs_1.tidy(function () {\n            return backend.executeSingleOutput(tfjs_1.Pow, opAttrs, [tfjs_1.cast(a, dtype), tfjs_1.cast(b, dtype)]);\n        });\n    }\n};\n"]},"metadata":{},"sourceType":"script"}