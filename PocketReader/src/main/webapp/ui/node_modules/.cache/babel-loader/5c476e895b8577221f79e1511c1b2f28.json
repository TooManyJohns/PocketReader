{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\n\nexports.maxPoolConfig = {\n  kernelName: tfjs_1.MaxPool,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var x = args.inputs.x;\n    var backend = args.backend;\n    var _a = args.attrs,\n        filterSize = _a.filterSize,\n        strides = _a.strides,\n        pad = _a.pad,\n        dimRoundingMode = _a.dimRoundingMode;\n    var convInfo = tfjs_1.backend_util.computePool2DInfo(x.shape, filterSize, strides, 1\n    /* dilations */\n    , pad, dimRoundingMode);\n\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n      throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + (\"while padding was \" + convInfo.padInfo.type));\n    }\n\n    var ksize = [1, convInfo.filterHeight, convInfo.filterWidth, 1];\n    var $strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n    var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'ksize',\n      type: backend.binding.TF_ATTR_INT,\n      value: ksize\n    }, {\n      name: 'strides',\n      type: backend.binding.TF_ATTR_INT,\n      value: $strides\n    }, {\n      name: 'padding',\n      type: backend.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: backend.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }];\n    return backend.executeSingleOutput(tfjs_1.MaxPool, opAttrs, [x]);\n  }\n};","map":{"version":3,"sources":["/Users/johnlutz/Github/PocketReader/PocketReader/src/main/webapp/ui/node_modules/@tensorflow/tfjs-node/dist/kernels/MaxPool.js"],"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","maxPoolConfig","kernelName","MaxPool","backendName","kernelFunc","args","x","inputs","backend","_a","attrs","filterSize","strides","pad","dimRoundingMode","convInfo","backend_util","computePool2DInfo","shape","padInfo","type","Error","ksize","filterHeight","filterWidth","$strides","strideHeight","strideWidth","padding","dataFormat","opAttrs","createTensorsTypeOpAttr","dtype","name","binding","TF_ATTR_INT","TF_ATTR_STRING","executeSingleOutput"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.maxPoolConfig = {\n    kernelName: tfjs_1.MaxPool,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var x = args.inputs.x;\n        var backend = args.backend;\n        var _a = args.attrs, filterSize = _a.filterSize, strides = _a.strides, pad = _a.pad, dimRoundingMode = _a.dimRoundingMode;\n        var convInfo = tfjs_1.backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n        if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n            throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n                (\"while padding was \" + convInfo.padInfo.type));\n        }\n        var ksize = [1, convInfo.filterHeight, convInfo.filterWidth, 1];\n        var $strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n        var opAttrs = [\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype),\n            { name: 'ksize', type: backend.binding.TF_ATTR_INT, value: ksize },\n            { name: 'strides', type: backend.binding.TF_ATTR_INT, value: $strides },\n            { name: 'padding', type: backend.binding.TF_ATTR_STRING, value: padding }, {\n                name: 'data_format',\n                type: backend.binding.TF_ATTR_STRING,\n                value: dataFormat\n            }\n        ];\n        return backend.executeSingleOutput(tfjs_1.MaxPool, opAttrs, [x]);\n    }\n};\n"]},"metadata":{},"sourceType":"script"}