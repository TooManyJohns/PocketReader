{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\n\nexports.multinomialConfig = {\n  kernelName: tfjs_1.Multinomial,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var logits = args.inputs.logits;\n    var backend = args.backend;\n    var _a = args.attrs,\n        numSamples = _a.numSamples,\n        seed = _a.seed,\n        normalized = _a.normalized;\n\n    if (normalized) {\n      throw new Error('TF Node backend does not support normalized logits ' + 'passed to multinomial');\n    }\n\n    var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', logits.dtype), nodejs_kernel_backend_1.createTensorsTypeOpAttr('output_dtype', 'int32'), {\n      name: 'seed',\n      type: backend.binding.TF_ATTR_INT,\n      value: seed\n    }, {\n      name: 'seed2',\n      type: backend.binding.TF_ATTR_INT,\n      value: seed * seed\n    }];\n    var numSamplesTensor = tfjs_1.scalar(numSamples, 'int32');\n    var res = backend.executeSingleOutput(tfjs_1.Multinomial, opAttrs, [logits, numSamplesTensor]);\n    numSamplesTensor.dispose();\n    return res;\n  }\n};","map":{"version":3,"sources":["/Users/johnlutz/Github/PocketReader/PocketReader/src/main/webapp/ui/node_modules/@tensorflow/tfjs-node/dist/kernels/Multinomial.js"],"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","multinomialConfig","kernelName","Multinomial","backendName","kernelFunc","args","logits","inputs","backend","_a","attrs","numSamples","seed","normalized","Error","opAttrs","createTensorsTypeOpAttr","dtype","name","type","binding","TF_ATTR_INT","numSamplesTensor","scalar","res","executeSingleOutput","dispose"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,0BAAD,CAArC;;AACAH,OAAO,CAACK,iBAAR,GAA4B;AACxBC,EAAAA,UAAU,EAAEJ,MAAM,CAACK,WADK;AAExBC,EAAAA,WAAW,EAAE,YAFW;AAGxBC,EAAAA,UAAU,EAAE,UAAUC,IAAV,EAAgB;AACxB,QAAIC,MAAM,GAAGD,IAAI,CAACE,MAAL,CAAYD,MAAzB;AACA,QAAIE,OAAO,GAAGH,IAAI,CAACG,OAAnB;AACA,QAAIC,EAAE,GAAGJ,IAAI,CAACK,KAAd;AAAA,QAAqBC,UAAU,GAAGF,EAAE,CAACE,UAArC;AAAA,QAAiDC,IAAI,GAAGH,EAAE,CAACG,IAA3D;AAAA,QAAiEC,UAAU,GAAGJ,EAAE,CAACI,UAAjF;;AACA,QAAIA,UAAJ,EAAgB;AACZ,YAAM,IAAIC,KAAJ,CAAU,wDACZ,uBADE,CAAN;AAEH;;AACD,QAAIC,OAAO,GAAG,CACVhB,uBAAuB,CAACiB,uBAAxB,CAAgD,GAAhD,EAAqDV,MAAM,CAACW,KAA5D,CADU,EAEVlB,uBAAuB,CAACiB,uBAAxB,CAAgD,cAAhD,EAAgE,OAAhE,CAFU,EAGV;AAAEE,MAAAA,IAAI,EAAE,MAAR;AAAgBC,MAAAA,IAAI,EAAEX,OAAO,CAACY,OAAR,CAAgBC,WAAtC;AAAmDzB,MAAAA,KAAK,EAAEgB;AAA1D,KAHU,EAIV;AAAEM,MAAAA,IAAI,EAAE,OAAR;AAAiBC,MAAAA,IAAI,EAAEX,OAAO,CAACY,OAAR,CAAgBC,WAAvC;AAAoDzB,MAAAA,KAAK,EAAEgB,IAAI,GAAGA;AAAlE,KAJU,CAAd;AAMA,QAAIU,gBAAgB,GAAGzB,MAAM,CAAC0B,MAAP,CAAcZ,UAAd,EAA0B,OAA1B,CAAvB;AACA,QAAIa,GAAG,GAAGhB,OAAO,CAACiB,mBAAR,CAA4B5B,MAAM,CAACK,WAAnC,EAAgDa,OAAhD,EAAyD,CAACT,MAAD,EAASgB,gBAAT,CAAzD,CAAV;AACAA,IAAAA,gBAAgB,CAACI,OAAjB;AACA,WAAOF,GAAP;AACH;AArBuB,CAA5B","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.multinomialConfig = {\n    kernelName: tfjs_1.Multinomial,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var logits = args.inputs.logits;\n        var backend = args.backend;\n        var _a = args.attrs, numSamples = _a.numSamples, seed = _a.seed, normalized = _a.normalized;\n        if (normalized) {\n            throw new Error('TF Node backend does not support normalized logits ' +\n                'passed to multinomial');\n        }\n        var opAttrs = [\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', logits.dtype),\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('output_dtype', 'int32'),\n            { name: 'seed', type: backend.binding.TF_ATTR_INT, value: seed },\n            { name: 'seed2', type: backend.binding.TF_ATTR_INT, value: seed * seed },\n        ];\n        var numSamplesTensor = tfjs_1.scalar(numSamples, 'int32');\n        var res = backend.executeSingleOutput(tfjs_1.Multinomial, opAttrs, [logits, numSamplesTensor]);\n        numSamplesTensor.dispose();\n        return res;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}