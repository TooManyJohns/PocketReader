{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\n\nexports.scatterNdConfig = {\n  kernelName: tfjs_1.ScatterNd,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var _a = args.inputs,\n        indices = _a.indices,\n        updates = _a.updates;\n    var backend = args.backend;\n    var shape = args.attrs.shape;\n    var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', updates.dtype), nodejs_kernel_backend_1.createTensorsTypeOpAttr('Tindices', 'int32')];\n    var shapeTensor = tfjs_1.tensor1d(shape, 'int32');\n    var ret = backend.executeSingleOutput(tfjs_1.ScatterNd, opAttrs, [indices, updates, shapeTensor]);\n    shapeTensor.dispose();\n    return ret;\n  }\n};","map":{"version":3,"sources":["/Users/johnlutz/Github/PocketReader/PocketReader/src/main/webapp/ui/node_modules/@tensorflow/tfjs-node/dist/kernels/ScatterNd.js"],"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","scatterNdConfig","kernelName","ScatterNd","backendName","kernelFunc","args","_a","inputs","indices","updates","backend","shape","attrs","opAttrs","createTensorsTypeOpAttr","dtype","shapeTensor","tensor1d","ret","executeSingleOutput","dispose"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,0BAAD,CAArC;;AACAH,OAAO,CAACK,eAAR,GAA0B;AACtBC,EAAAA,UAAU,EAAEJ,MAAM,CAACK,SADG;AAEtBC,EAAAA,WAAW,EAAE,YAFS;AAGtBC,EAAAA,UAAU,EAAE,UAAUC,IAAV,EAAgB;AACxB,QAAIC,EAAE,GAAGD,IAAI,CAACE,MAAd;AAAA,QAAsBC,OAAO,GAAGF,EAAE,CAACE,OAAnC;AAAA,QAA4CC,OAAO,GAAGH,EAAE,CAACG,OAAzD;AACA,QAAIC,OAAO,GAAGL,IAAI,CAACK,OAAnB;AACA,QAAIC,KAAK,GAAGN,IAAI,CAACO,KAAL,CAAWD,KAAvB;AACA,QAAIE,OAAO,GAAG,CACVd,uBAAuB,CAACe,uBAAxB,CAAgD,GAAhD,EAAqDL,OAAO,CAACM,KAA7D,CADU,EAEVhB,uBAAuB,CAACe,uBAAxB,CAAgD,UAAhD,EAA4D,OAA5D,CAFU,CAAd;AAIA,QAAIE,WAAW,GAAGnB,MAAM,CAACoB,QAAP,CAAgBN,KAAhB,EAAuB,OAAvB,CAAlB;AACA,QAAIO,GAAG,GAAGR,OAAO,CAACS,mBAAR,CAA4BtB,MAAM,CAACK,SAAnC,EAA8CW,OAA9C,EAAuD,CAACL,OAAD,EAAUC,OAAV,EAAmBO,WAAnB,CAAvD,CAAV;AACAA,IAAAA,WAAW,CAACI,OAAZ;AACA,WAAOF,GAAP;AACH;AAfqB,CAA1B","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.scatterNdConfig = {\n    kernelName: tfjs_1.ScatterNd,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var _a = args.inputs, indices = _a.indices, updates = _a.updates;\n        var backend = args.backend;\n        var shape = args.attrs.shape;\n        var opAttrs = [\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', updates.dtype),\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('Tindices', 'int32')\n        ];\n        var shapeTensor = tfjs_1.tensor1d(shape, 'int32');\n        var ret = backend.executeSingleOutput(tfjs_1.ScatterNd, opAttrs, [indices, updates, shapeTensor]);\n        shapeTensor.dispose();\n        return ret;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}