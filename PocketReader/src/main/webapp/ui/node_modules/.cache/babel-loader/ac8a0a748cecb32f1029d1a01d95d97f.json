{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\n\nexports.fusedBatchNormConfig = {\n  kernelName: tfjs_1.FusedBatchNorm,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var _a = args.inputs,\n        x = _a.x,\n        mean = _a.mean,\n        variance = _a.variance;\n    var _b = args.inputs,\n        scale = _b.scale,\n        offset = _b.offset;\n    var backend = args.backend;\n    var varianceEpsilon = args.attrs.varianceEpsilon;\n    return tfjs_1.tidy(function () {\n      if (mean.rank > 1) {\n        // Fused batch norm doesn't work with high-dim mean/var/scale/offset.\n        var inv = tfjs_1.rsqrt(tfjs_1.add(variance, tfjs_1.scalar(varianceEpsilon)));\n\n        if (scale != null) {\n          inv = tfjs_1.mul(inv, scale);\n        }\n\n        var xNorm = tfjs_1.mul(tfjs_1.sub(x, mean), inv);\n        return offset != null ? tfjs_1.add(xNorm, offset) : xNorm;\n      }\n\n      var dataFormat = 'NHWC';\n      var depth = x.shape[3];\n      var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype), {\n        name: 'epsilon',\n        type: backend.binding.TF_ATTR_FLOAT,\n        value: varianceEpsilon\n      }, {\n        name: 'data_format',\n        type: backend.binding.TF_ATTR_STRING,\n        value: dataFormat\n      }, {\n        name: 'is_training',\n        type: backend.binding.TF_ATTR_BOOL,\n        value: false\n      }];\n      var numOutputs = 5;\n\n      if (scale == null) {\n        scale = tfjs_1.fill([depth], 1);\n      }\n\n      if (offset == null) {\n        offset = tfjs_1.fill([depth], 0);\n      }\n\n      return backend.executeMultipleOutputs(tfjs_1.FusedBatchNorm, opAttrs, [x, scale, offset, mean, variance], numOutputs)[0];\n    });\n  }\n};","map":{"version":3,"sources":["/Users/johnlutz/Github/PocketReader/PocketReader/src/main/webapp/ui/node_modules/@tensorflow/tfjs-node/dist/kernels/FusedBatchNorm.js"],"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","fusedBatchNormConfig","kernelName","FusedBatchNorm","backendName","kernelFunc","args","_a","inputs","x","mean","variance","_b","scale","offset","backend","varianceEpsilon","attrs","tidy","rank","inv","rsqrt","add","scalar","mul","xNorm","sub","dataFormat","depth","shape","opAttrs","createTensorsTypeOpAttr","dtype","name","type","binding","TF_ATTR_FLOAT","TF_ATTR_STRING","TF_ATTR_BOOL","numOutputs","fill","executeMultipleOutputs"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.fusedBatchNormConfig = {\n    kernelName: tfjs_1.FusedBatchNorm,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var _a = args.inputs, x = _a.x, mean = _a.mean, variance = _a.variance;\n        var _b = args.inputs, scale = _b.scale, offset = _b.offset;\n        var backend = args.backend;\n        var varianceEpsilon = args.attrs.varianceEpsilon;\n        return tfjs_1.tidy(function () {\n            if (mean.rank > 1) {\n                // Fused batch norm doesn't work with high-dim mean/var/scale/offset.\n                var inv = tfjs_1.rsqrt(tfjs_1.add(variance, tfjs_1.scalar(varianceEpsilon)));\n                if (scale != null) {\n                    inv = tfjs_1.mul(inv, scale);\n                }\n                var xNorm = tfjs_1.mul(tfjs_1.sub(x, mean), inv);\n                return offset != null ? tfjs_1.add(xNorm, offset) : xNorm;\n            }\n            var dataFormat = 'NHWC';\n            var depth = x.shape[3];\n            var opAttrs = [\n                nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype),\n                {\n                    name: 'epsilon',\n                    type: backend.binding.TF_ATTR_FLOAT,\n                    value: varianceEpsilon\n                },\n                {\n                    name: 'data_format',\n                    type: backend.binding.TF_ATTR_STRING,\n                    value: dataFormat\n                },\n                { name: 'is_training', type: backend.binding.TF_ATTR_BOOL, value: false },\n            ];\n            var numOutputs = 5;\n            if (scale == null) {\n                scale = tfjs_1.fill([depth], 1);\n            }\n            if (offset == null) {\n                offset = tfjs_1.fill([depth], 0);\n            }\n            return backend.executeMultipleOutputs(tfjs_1.FusedBatchNorm, opAttrs, [x, scale, offset, mean, variance], numOutputs)[0];\n        });\n    }\n};\n"]},"metadata":{},"sourceType":"script"}